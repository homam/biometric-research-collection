{"version":3,"sources":["node_modules/parcel-bundler/src/builtins/bundle-url.js","node_modules/parcel-bundler/src/builtins/bundle-loader.js","../../src/helper.ts","../../src/types.ts","../../src/FunctionsClient.ts","../../src/index.ts","../../src/PostgrestBuilder.ts","../../src/PostgrestTransformBuilder.ts","../../src/PostgrestFilterBuilder.ts","../../src/PostgrestQueryBuilder.ts","../../src/version.ts","../../src/constants.ts","../../src/PostgrestClient.ts","node_modules/es5-ext/global.js","node_modules/websocket/package.json","node_modules/websocket/lib/version.js","node_modules/websocket/lib/browser.js","../../../src/lib/version.ts","../../../src/lib/constants.ts","../../../src/lib/timer.ts","../../../src/lib/serializer.ts","../../../src/lib/push.ts","../../src/RealtimePresence.ts","../../../src/lib/transformers.ts","../../src/RealtimeChannel.ts","../../src/RealtimeClient.ts","../../../src/lib/errors.ts","../../../src/lib/helpers.ts","../../../src/lib/fetch.ts","../../../src/packages/StorageFileApi.ts","../../../src/packages/StorageBucketApi.ts","../../src/StorageClient.ts","../../src/GoTrueAdminApi.ts","../../../src/lib/local-storage.ts","../../../src/lib/polyfills.ts","../../src/GoTrueClient.ts","../../../src/lib/SupabaseAuthClient.ts","../../src/SupabaseClient.ts","src/telemetry.ts","src/index.ts","node_modules/parcel-bundler/src/builtins/loaders/browser/js-loader.js"],"names":["bundleURL","getBundleURLCached","getBundleURL","Error","err","matches","stack","match","getBaseURL","url","replace","exports","require","loadBundlesLazy","bundles","Array","isArray","id","length","Promise","resolve","code","LazyPromise","reject","loadBundles","slice","then","all","map","loadBundle","bundleLoaders","registerBundleLoader","type","loader","module","load","register","bundle","substring","lastIndexOf","toLowerCase","bundleLoader","resolved","catch","e","executor","promise","prototype","onSuccess","onError","naiveFallback","self","window","globalThis","Object","defineProperty","get","configurable","error","__global__","name","description","keywords","author","contributors","version","repository","homepage","engines","node","dependencies","bufferutil","debug","yaeti","devDependencies","gulp","jshint","tape","config","verbose","scripts","test","main","directories","lib","browser","license","_globalThis","_typeof","NativeWebSocket","WebSocket","MozWebSocket","websocket_version","W3CWebSocket","uri","protocols","forEach","prop","script","document","createElement","async","charset","src","onerror","onload","getElementsByTagName","appendChild"],"mappings":"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","file":"src.96cf7815.js","sourceRoot":"..","sourcesContent":["var bundleURL = null;\nfunction getBundleURLCached() {\n  if (!bundleURL) {\n    bundleURL = getBundleURL();\n  }\n\n  return bundleURL;\n}\n\nfunction getBundleURL() {\n  // Attempt to find the URL of the current script and use that as the base URL\n  try {\n    throw new Error;\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\\/\\/[^)\\n]+/g);\n    if (matches) {\n      return getBaseURL(matches[0]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\\/\\/.+)?\\/[^/]+(?:\\?.*)?$/, '$1') + '/';\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\n","var getBundleURL = require('./bundle-url').getBundleURL;\n\nfunction loadBundlesLazy(bundles) {\n  if (!Array.isArray(bundles)) {\n    bundles = [bundles]\n  }\n\n  var id = bundles[bundles.length - 1];\n\n  try {\n    return Promise.resolve(require(id));\n  } catch (err) {\n    if (err.code === 'MODULE_NOT_FOUND') {\n      return new LazyPromise(function (resolve, reject) {\n        loadBundles(bundles.slice(0, -1))\n          .then(function () {\n            return require(id);\n          })\n          .then(resolve, reject);\n      });\n    }\n\n    throw err;\n  }\n}\n\nfunction loadBundles(bundles) {\n  return Promise.all(bundles.map(loadBundle));\n}\n\nvar bundleLoaders = {};\nfunction registerBundleLoader(type, loader) {\n  bundleLoaders[type] = loader;\n}\n\nmodule.exports = exports = loadBundlesLazy;\nexports.load = loadBundles;\nexports.register = registerBundleLoader;\n\nvar bundles = {};\nfunction loadBundle(bundle) {\n  var id;\n  if (Array.isArray(bundle)) {\n    id = bundle[1];\n    bundle = bundle[0];\n  }\n\n  if (bundles[bundle]) {\n    return bundles[bundle];\n  }\n\n  var type = (bundle.substring(bundle.lastIndexOf('.') + 1, bundle.length) || bundle).toLowerCase();\n  var bundleLoader = bundleLoaders[type];\n  if (bundleLoader) {\n    return bundles[bundle] = bundleLoader(getBundleURL() + bundle)\n      .then(function (resolved) {\n        if (resolved) {\n          module.bundle.register(id, resolved);\n        }\n\n        return resolved;\n      }).catch(function(e) {\n        delete bundles[bundle];\n        \n        throw e;\n      });\n  }\n}\n\nfunction LazyPromise(executor) {\n  this.executor = executor;\n  this.promise = null;\n}\n\nLazyPromise.prototype.then = function (onSuccess, onError) {\n  if (this.promise === null) this.promise = new Promise(this.executor)\n  return this.promise.then(onSuccess, onError)\n};\n\nLazyPromise.prototype.catch = function (onError) {\n  if (this.promise === null) this.promise = new Promise(this.executor)\n  return this.promise.catch(onError)\n};\n","import { Fetch } from './types'\n\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\n  let _fetch: Fetch\n  if (customFetch) {\n    _fetch = customFetch\n  } else if (typeof fetch === 'undefined') {\n    _fetch = async (...args) => await (await import('cross-fetch')).fetch(...args)\n  } else {\n    _fetch = fetch\n  }\n  return (...args) => _fetch(...args)\n}\n","export type Fetch = typeof fetch\n\n/**\n * Response format\n *\n */\nexport interface FunctionsResponseSuccess<T> {\n  data: T\n  error: null\n}\nexport interface FunctionsResponseFailure {\n  data: null\n  error: any\n}\nexport type FunctionsResponse<T> = FunctionsResponseSuccess<T> | FunctionsResponseFailure\n\nexport class FunctionsError extends Error {\n  context: any\n  constructor(message: string, name = 'FunctionsError', context?: any) {\n    super(message)\n    super.name = name\n    this.context = context\n  }\n}\n\nexport class FunctionsFetchError extends FunctionsError {\n  constructor(context: any) {\n    super('Failed to send a request to the Edge Function', 'FunctionsFetchError', context)\n  }\n}\n\nexport class FunctionsRelayError extends FunctionsError {\n  constructor(context: any) {\n    super('Relay Error invoking the Edge Function', 'FunctionsRelayError', context)\n  }\n}\n\nexport class FunctionsHttpError extends FunctionsError {\n  constructor(context: any) {\n    super('Edge Function returned a non-2xx status code', 'FunctionsHttpError', context)\n  }\n}\n\nexport type FunctionInvokeOptions = {\n  /**\n   * Object representing the headers to send with the request.\n   * */\n  headers?: { [key: string]: string }\n  /**\n   * The HTTP verb of the request\n   */\n  method?: 'POST' | 'GET' | 'PUT' | 'PATCH' | 'DELETE'\n  /**\n   * The body of the request.\n   */\n  body?:\n    | File\n    | Blob\n    | ArrayBuffer\n    | FormData\n    | ReadableStream<Uint8Array>\n    | Record<string, any>\n    | string\n}\n","import { resolveFetch } from './helper'\nimport {\n  Fetch,\n  FunctionsFetchError,\n  FunctionsHttpError,\n  FunctionsRelayError,\n  FunctionsResponse,\n  FunctionInvokeOptions,\n} from './types'\n\nexport class FunctionsClient {\n  protected url: string\n  protected headers: Record<string, string>\n  protected fetch: Fetch\n\n  constructor(\n    url: string,\n    {\n      headers = {},\n      customFetch,\n    }: {\n      headers?: Record<string, string>\n      customFetch?: Fetch\n    } = {}\n  ) {\n    this.url = url\n    this.headers = headers\n    this.fetch = resolveFetch(customFetch)\n  }\n\n  /**\n   * Updates the authorization header\n   * @param token - the new jwt token sent in the authorisation header\n   */\n  setAuth(token: string) {\n    this.headers.Authorization = `Bearer ${token}`\n  }\n\n  /**\n   * Invokes a function\n   * @param functionName - The name of the Function to invoke.\n   * @param options - Options for invoking the Function.\n   */\n  async invoke<T = any>(\n    functionName: string,\n    options: FunctionInvokeOptions = {}\n  ): Promise<FunctionsResponse<T>> {\n    try {\n      const { headers, method, body: functionArgs } = options\n\n      let _headers: Record<string, string> = {}\n      let body: any\n      if (\n        functionArgs &&\n        ((headers && !Object.prototype.hasOwnProperty.call(headers, 'Content-Type')) || !headers)\n      ) {\n        if (\n          (typeof Blob !== 'undefined' && functionArgs instanceof Blob) ||\n          functionArgs instanceof ArrayBuffer\n        ) {\n          // will work for File as File inherits Blob\n          // also works for ArrayBuffer as it is the same underlying structure as a Blob\n          _headers['Content-Type'] = 'application/octet-stream'\n          body = functionArgs\n        } else if (typeof functionArgs === 'string') {\n          // plain string\n          _headers['Content-Type'] = 'text/plain'\n          body = functionArgs\n        } else if (typeof FormData !== 'undefined' && functionArgs instanceof FormData) {\n          // don't set content-type headers\n          // Request will automatically add the right boundary value\n          body = functionArgs\n        } else {\n          // default, assume this is JSON\n          _headers['Content-Type'] = 'application/json'\n          body = JSON.stringify(functionArgs)\n        }\n      }\n\n      const response = await this.fetch(`${this.url}/${functionName}`, {\n        method: method || 'POST',\n        // headers priority is (high to low):\n        // 1. invoke-level headers\n        // 2. client-level headers\n        // 3. default Content-Type header\n        headers: { ..._headers, ...this.headers, ...headers },\n        body,\n      }).catch((fetchError) => {\n        throw new FunctionsFetchError(fetchError)\n      })\n\n      const isRelayError = response.headers.get('x-relay-error')\n      if (isRelayError && isRelayError === 'true') {\n        throw new FunctionsRelayError(response)\n      }\n\n      if (!response.ok) {\n        throw new FunctionsHttpError(response)\n      }\n\n      let responseType = (response.headers.get('Content-Type') ?? 'text/plain').split(';')[0].trim()\n      let data: any\n      if (responseType === 'application/json') {\n        data = await response.json()\n      } else if (responseType === 'application/octet-stream') {\n        data = await response.blob()\n      } else if (responseType === 'multipart/form-data') {\n        data = await response.formData()\n      } else {\n        // default to text\n        data = await response.text()\n      }\n\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n}\n","export { FunctionsClient } from './FunctionsClient'\nexport {\n  FunctionInvokeOptions,\n  FunctionsError,\n  FunctionsFetchError,\n  FunctionsHttpError,\n  FunctionsRelayError,\n  FunctionsResponse,\n} from './types'\n","import crossFetch from 'cross-fetch'\n\nimport type { Fetch, PostgrestSingleResponse } from './types'\n\nexport default abstract class PostgrestBuilder<Result>\n  implements PromiseLike<PostgrestSingleResponse<Result>>\n{\n  protected method: 'GET' | 'HEAD' | 'POST' | 'PATCH' | 'DELETE'\n  protected url: URL\n  protected headers: Record<string, string>\n  protected schema?: string\n  protected body?: unknown\n  protected shouldThrowOnError = false\n  protected signal?: AbortSignal\n  protected fetch: Fetch\n  protected isMaybeSingle: boolean\n\n  constructor(builder: PostgrestBuilder<Result>) {\n    this.method = builder.method\n    this.url = builder.url\n    this.headers = builder.headers\n    this.schema = builder.schema\n    this.body = builder.body\n    this.shouldThrowOnError = builder.shouldThrowOnError\n    this.signal = builder.signal\n    this.isMaybeSingle = builder.isMaybeSingle\n\n    if (builder.fetch) {\n      this.fetch = builder.fetch\n    } else if (typeof fetch === 'undefined') {\n      this.fetch = crossFetch\n    } else {\n      this.fetch = fetch\n    }\n  }\n\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n  throwOnError(): this {\n    this.shouldThrowOnError = true\n    return this\n  }\n\n  then<TResult1 = PostgrestSingleResponse<Result>, TResult2 = never>(\n    onfulfilled?:\n      | ((value: PostgrestSingleResponse<Result>) => TResult1 | PromiseLike<TResult1>)\n      | undefined\n      | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null\n  ): PromiseLike<TResult1 | TResult2> {\n    // https://postgrest.org/en/stable/api.html#switching-schemas\n    if (this.schema === undefined) {\n      // skip\n    } else if (['GET', 'HEAD'].includes(this.method)) {\n      this.headers['Accept-Profile'] = this.schema\n    } else {\n      this.headers['Content-Profile'] = this.schema\n    }\n    if (this.method !== 'GET' && this.method !== 'HEAD') {\n      this.headers['Content-Type'] = 'application/json'\n    }\n\n    // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n    // https://github.com/supabase/postgrest-js/pull/247\n    const _fetch = this.fetch\n    let res = _fetch(this.url.toString(), {\n      method: this.method,\n      headers: this.headers,\n      body: JSON.stringify(this.body),\n      signal: this.signal,\n    }).then(async (res) => {\n      let error = null\n      let data = null\n      let count: number | null = null\n      let status = res.status\n      let statusText = res.statusText\n\n      if (res.ok) {\n        if (this.method !== 'HEAD') {\n          const body = await res.text()\n          if (body === '') {\n            // Prefer: return=minimal\n          } else if (this.headers['Accept'] === 'text/csv') {\n            data = body\n          } else if (\n            this.headers['Accept'] &&\n            this.headers['Accept'].includes('application/vnd.pgrst.plan+text')\n          ) {\n            data = body\n          } else {\n            data = JSON.parse(body)\n          }\n        }\n\n        const countHeader = this.headers['Prefer']?.match(/count=(exact|planned|estimated)/)\n        const contentRange = res.headers.get('content-range')?.split('/')\n        if (countHeader && contentRange && contentRange.length > 1) {\n          count = parseInt(contentRange[1])\n        }\n\n        // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n        // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n        if (this.isMaybeSingle && this.method === 'GET' && Array.isArray(data)) {\n          if (data.length > 1) {\n            error = {\n              // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553\n              code: 'PGRST116',\n              details: `Results contain ${data.length} rows, application/vnd.pgrst.object+json requires 1 row`,\n              hint: null,\n              message: 'JSON object requested, multiple (or no) rows returned',\n            }\n            data = null\n            count = null\n            status = 406\n            statusText = 'Not Acceptable'\n          } else if (data.length === 1) {\n            data = data[0]\n          } else {\n            data = null\n          }\n        }\n      } else {\n        const body = await res.text()\n\n        try {\n          error = JSON.parse(body)\n\n          // Workaround for https://github.com/supabase/postgrest-js/issues/295\n          if (Array.isArray(error) && res.status === 404) {\n            data = []\n            error = null\n            status = 200\n            statusText = 'OK'\n          }\n        } catch {\n          // Workaround for https://github.com/supabase/postgrest-js/issues/295\n          if (res.status === 404 && body === '') {\n            status = 204\n            statusText = 'No Content'\n          } else {\n            error = {\n              message: body,\n            }\n          }\n        }\n\n        if (error && this.isMaybeSingle && error?.details?.includes('Results contain 0 rows')) {\n          error = null\n          status = 200\n          statusText = 'OK'\n        }\n\n        if (error && this.shouldThrowOnError) {\n          throw error\n        }\n      }\n\n      const postgrestResponse = {\n        error,\n        data,\n        count,\n        status,\n        statusText,\n      }\n\n      return postgrestResponse\n    })\n    if (!this.shouldThrowOnError) {\n      res = res.catch((fetchError) => ({\n        error: {\n          message: `${fetchError?.name ?? 'FetchError'}: ${fetchError?.message}`,\n          details: `${fetchError?.stack ?? ''}`,\n          hint: '',\n          code: `${fetchError?.code ?? ''}`,\n        },\n        data: null,\n        count: null,\n        status: 0,\n        statusText: '',\n      }))\n    }\n\n    return res.then(onfulfilled, onrejected)\n  }\n}\n","import PostgrestBuilder from './PostgrestBuilder'\nimport { GetResult } from './select-query-parser'\nimport { GenericSchema } from './types'\n\nexport default class PostgrestTransformBuilder<\n  Schema extends GenericSchema,\n  Row extends Record<string, unknown>,\n  Result,\n  Relationships = unknown\n> extends PostgrestBuilder<Result> {\n  /**\n   * Perform a SELECT on the query result.\n   *\n   * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n   * return modified rows. By calling this method, modified rows are returned in\n   * `data`.\n   *\n   * @param columns - The columns to retrieve, separated by commas\n   */\n  select<Query extends string = '*', NewResultOne = GetResult<Schema, Row, Relationships, Query>>(\n    columns?: Query\n  ): PostgrestTransformBuilder<Schema, Row, NewResultOne[], Relationships> {\n    // Remove whitespaces except when quoted\n    let quoted = false\n    const cleanedColumns = (columns ?? '*')\n      .split('')\n      .map((c) => {\n        if (/\\s/.test(c) && !quoted) {\n          return ''\n        }\n        if (c === '\"') {\n          quoted = !quoted\n        }\n        return c\n      })\n      .join('')\n    this.url.searchParams.set('select', cleanedColumns)\n    if (this.headers['Prefer']) {\n      this.headers['Prefer'] += ','\n    }\n    this.headers['Prefer'] += 'return=representation'\n    return this as unknown as PostgrestTransformBuilder<Schema, Row, NewResultOne[], Relationships>\n  }\n\n  order<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    options?: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: undefined }\n  ): this\n  order(\n    column: string,\n    options?: { ascending?: boolean; nullsFirst?: boolean; foreignTable: string }\n  ): this\n  /**\n   * Order the query result by `column`.\n   *\n   * You can call this method multiple times to order by multiple columns.\n   *\n   * You can order foreign tables, but it doesn't affect the ordering of the\n   * current table.\n   *\n   * @param column - The column to order by\n   * @param options - Named parameters\n   * @param options.ascending - If `true`, the result will be in ascending order\n   * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\n   * `null`s appear last.\n   * @param options.foreignTable - Set this to order a foreign table by foreign\n   * columns\n   */\n  order(\n    column: string,\n    {\n      ascending = true,\n      nullsFirst,\n      foreignTable,\n    }: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: string } = {}\n  ): this {\n    const key = foreignTable ? `${foreignTable}.order` : 'order'\n    const existingOrder = this.url.searchParams.get(key)\n\n    this.url.searchParams.set(\n      key,\n      `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${\n        nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'\n      }`\n    )\n    return this\n  }\n\n  /**\n   * Limit the query result by `count`.\n   *\n   * @param count - The maximum number of rows to return\n   * @param options - Named parameters\n   * @param options.foreignTable - Set this to limit rows of foreign tables\n   * instead of the current table\n   */\n  limit(count: number, { foreignTable }: { foreignTable?: string } = {}): this {\n    const key = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`\n    this.url.searchParams.set(key, `${count}`)\n    return this\n  }\n\n  /**\n   * Limit the query result by `from` and `to` inclusively.\n   *\n   * @param from - The starting index from which to limit the result\n   * @param to - The last index to which to limit the result\n   * @param options - Named parameters\n   * @param options.foreignTable - Set this to limit rows of foreign tables\n   * instead of the current table\n   */\n  range(from: number, to: number, { foreignTable }: { foreignTable?: string } = {}): this {\n    const keyOffset = typeof foreignTable === 'undefined' ? 'offset' : `${foreignTable}.offset`\n    const keyLimit = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`\n    this.url.searchParams.set(keyOffset, `${from}`)\n    // Range is inclusive, so add 1\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`)\n    return this\n  }\n\n  /**\n   * Set the AbortSignal for the fetch request.\n   *\n   * @param signal - The AbortSignal to use for the fetch request\n   */\n  abortSignal(signal: AbortSignal): this {\n    this.signal = signal\n    return this\n  }\n\n  /**\n   * Return `data` as a single object instead of an array of objects.\n   *\n   * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n   * returns an error.\n   */\n  single<\n    ResultOne = Result extends (infer ResultOne)[] ? ResultOne : never\n  >(): PostgrestBuilder<ResultOne> {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json'\n    return this as PostgrestBuilder<ResultOne>\n  }\n\n  /**\n   * Return `data` as a single object instead of an array of objects.\n   *\n   * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n   * this returns an error.\n   */\n  maybeSingle<\n    ResultOne = Result extends (infer ResultOne)[] ? ResultOne : never\n  >(): PostgrestBuilder<ResultOne | null> {\n    // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n    // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n    if (this.method === 'GET') {\n      this.headers['Accept'] = 'application/json'\n    } else {\n      this.headers['Accept'] = 'application/vnd.pgrst.object+json'\n    }\n    this.isMaybeSingle = true\n    return this as PostgrestBuilder<ResultOne | null>\n  }\n\n  /**\n   * Return `data` as a string in CSV format.\n   */\n  csv(): PostgrestBuilder<string> {\n    this.headers['Accept'] = 'text/csv'\n    return this as PostgrestBuilder<string>\n  }\n\n  /**\n   * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n   */\n  geojson(): PostgrestBuilder<Record<string, unknown>> {\n    this.headers['Accept'] = 'application/geo+json'\n    return this as PostgrestBuilder<Record<string, unknown>>\n  }\n\n  /**\n   * Return `data` as the EXPLAIN plan for the query.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.analyze - If `true`, the query will be executed and the\n   * actual run time will be returned\n   *\n   * @param options.verbose - If `true`, the query identifier will be returned\n   * and `data` will include the output columns of the query\n   *\n   * @param options.settings - If `true`, include information on configuration\n   * parameters that affect query planning\n   *\n   * @param options.buffers - If `true`, include information on buffer usage\n   *\n   * @param options.wal - If `true`, include information on WAL record generation\n   *\n   * @param options.format - The format of the output, can be `\"text\"` (default)\n   * or `\"json\"`\n   */\n  explain({\n    analyze = false,\n    verbose = false,\n    settings = false,\n    buffers = false,\n    wal = false,\n    format = 'text',\n  }: {\n    analyze?: boolean\n    verbose?: boolean\n    settings?: boolean\n    buffers?: boolean\n    wal?: boolean\n    format?: 'json' | 'text'\n  } = {}): PostgrestBuilder<Record<string, unknown>[]> | PostgrestBuilder<string> {\n    const options = [\n      analyze ? 'analyze' : null,\n      verbose ? 'verbose' : null,\n      settings ? 'settings' : null,\n      buffers ? 'buffers' : null,\n      wal ? 'wal' : null,\n    ]\n      .filter(Boolean)\n      .join('|')\n    // An Accept header can carry multiple media types but postgrest-js always sends one\n    const forMediatype = this.headers['Accept']\n    this.headers[\n      'Accept'\n    ] = `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`\n    if (format === 'json') return this as PostgrestBuilder<Record<string, unknown>[]>\n    else return this as PostgrestBuilder<string>\n  }\n\n  /**\n   * Rollback the query.\n   *\n   * `data` will still be returned, but the query is not committed.\n   */\n  rollback(): this {\n    if ((this.headers['Prefer'] ?? '').trim().length > 0) {\n      this.headers['Prefer'] += ',tx=rollback'\n    } else {\n      this.headers['Prefer'] = 'tx=rollback'\n    }\n    return this\n  }\n\n  /**\n   * Override the type of the returned `data`.\n   *\n   * @typeParam NewResult - The new result type to override with\n   */\n  returns<NewResult>(): PostgrestTransformBuilder<Schema, Row, NewResult, Relationships> {\n    return this as unknown as PostgrestTransformBuilder<Schema, Row, NewResult, Relationships>\n  }\n}\n","import PostgrestTransformBuilder from './PostgrestTransformBuilder'\nimport { GenericSchema } from './types'\n\ntype FilterOperator =\n  | 'eq'\n  | 'neq'\n  | 'gt'\n  | 'gte'\n  | 'lt'\n  | 'lte'\n  | 'like'\n  | 'ilike'\n  | 'is'\n  | 'in'\n  | 'cs'\n  | 'cd'\n  | 'sl'\n  | 'sr'\n  | 'nxl'\n  | 'nxr'\n  | 'adj'\n  | 'ov'\n  | 'fts'\n  | 'plfts'\n  | 'phfts'\n  | 'wfts'\n\nexport default class PostgrestFilterBuilder<\n  Schema extends GenericSchema,\n  Row extends Record<string, unknown>,\n  Result,\n  Relationships = unknown\n> extends PostgrestTransformBuilder<Schema, Row, Result, Relationships> {\n  eq<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\n  eq(column: string, value: unknown): this\n  /**\n   * Match only rows where `column` is equal to `value`.\n   *\n   * To check if the value of `column` is NULL, you should use `.is()` instead.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  eq(column: string, value: unknown): this {\n    this.url.searchParams.append(column, `eq.${value}`)\n    return this\n  }\n\n  neq<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\n  neq(column: string, value: unknown): this\n  /**\n   * Match only rows where `column` is not equal to `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  neq(column: string, value: unknown): this {\n    this.url.searchParams.append(column, `neq.${value}`)\n    return this\n  }\n\n  gt<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\n  gt(column: string, value: unknown): this\n  /**\n   * Match only rows where `column` is greater than `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  gt(column: string, value: unknown): this {\n    this.url.searchParams.append(column, `gt.${value}`)\n    return this\n  }\n\n  gte<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\n  gte(column: string, value: unknown): this\n  /**\n   * Match only rows where `column` is greater than or equal to `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  gte(column: string, value: unknown): this {\n    this.url.searchParams.append(column, `gte.${value}`)\n    return this\n  }\n\n  lt<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\n  lt(column: string, value: unknown): this\n  /**\n   * Match only rows where `column` is less than `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  lt(column: string, value: unknown): this {\n    this.url.searchParams.append(column, `lt.${value}`)\n    return this\n  }\n\n  lte<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this\n  lte(column: string, value: unknown): this\n  /**\n   * Match only rows where `column` is less than or equal to `value`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  lte(column: string, value: unknown): this {\n    this.url.searchParams.append(column, `lte.${value}`)\n    return this\n  }\n\n  like<ColumnName extends string & keyof Row>(column: ColumnName, pattern: string): this\n  like(column: string, pattern: string): this\n  /**\n   * Match only rows where `column` matches `pattern` case-sensitively.\n   *\n   * @param column - The column to filter on\n   * @param pattern - The pattern to match with\n   */\n  like(column: string, pattern: string): this {\n    this.url.searchParams.append(column, `like.${pattern}`)\n    return this\n  }\n\n  likeAllOf<ColumnName extends string & keyof Row>(column: ColumnName, patterns: string[]): this\n  likeAllOf(column: string, patterns: string[]): this\n  /**\n   * Match only rows where `column` matches all of `patterns` case-sensitively.\n   *\n   * @param column - The column to filter on\n   * @param patterns - The patterns to match with\n   */\n  likeAllOf(column: string, patterns: string[]): this {\n    this.url.searchParams.append(column, `like(all).{${patterns.join(',')}}`)\n    return this\n  }\n\n  likeAnyOf<ColumnName extends string & keyof Row>(column: ColumnName, patterns: string[]): this\n  likeAnyOf(column: string, patterns: string[]): this\n  /**\n   * Match only rows where `column` matches any of `patterns` case-sensitively.\n   *\n   * @param column - The column to filter on\n   * @param patterns - The patterns to match with\n   */\n  likeAnyOf(column: string, patterns: string[]): this {\n    this.url.searchParams.append(column, `like(any).{${patterns.join(',')}}`)\n    return this\n  }\n\n  ilike<ColumnName extends string & keyof Row>(column: ColumnName, pattern: string): this\n  ilike(column: string, pattern: string): this\n  /**\n   * Match only rows where `column` matches `pattern` case-insensitively.\n   *\n   * @param column - The column to filter on\n   * @param pattern - The pattern to match with\n   */\n  ilike(column: string, pattern: string): this {\n    this.url.searchParams.append(column, `ilike.${pattern}`)\n    return this\n  }\n\n  ilikeAllOf<ColumnName extends string & keyof Row>(column: ColumnName, patterns: string[]): this\n  ilikeAllOf(column: string, patterns: string[]): this\n  /**\n   * Match only rows where `column` matches all of `patterns` case-insensitively.\n   *\n   * @param column - The column to filter on\n   * @param patterns - The patterns to match with\n   */\n  ilikeAllOf(column: string, patterns: string[]): this {\n    this.url.searchParams.append(column, `ilike(all).{${patterns.join(',')}}`)\n    return this\n  }\n\n  ilikeAnyOf<ColumnName extends string & keyof Row>(column: ColumnName, patterns: string[]): this\n  ilikeAnyOf(column: string, patterns: string[]): this\n  /**\n   * Match only rows where `column` matches any of `patterns` case-insensitively.\n   *\n   * @param column - The column to filter on\n   * @param patterns - The patterns to match with\n   */\n  ilikeAnyOf(column: string, patterns: string[]): this {\n    this.url.searchParams.append(column, `ilike(any).{${patterns.join(',')}}`)\n    return this\n  }\n\n  is<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    value: Row[ColumnName] & (boolean | null)\n  ): this\n  is(column: string, value: boolean | null): this\n  /**\n   * Match only rows where `column` IS `value`.\n   *\n   * For non-boolean columns, this is only relevant for checking if the value of\n   * `column` is NULL by setting `value` to `null`.\n   *\n   * For boolean columns, you can also set `value` to `true` or `false` and it\n   * will behave the same way as `.eq()`.\n   *\n   * @param column - The column to filter on\n   * @param value - The value to filter with\n   */\n  is(column: string, value: boolean | null): this {\n    this.url.searchParams.append(column, `is.${value}`)\n    return this\n  }\n\n  in<ColumnName extends string & keyof Row>(column: ColumnName, values: Row[ColumnName][]): this\n  in(column: string, values: unknown[]): this\n  /**\n   * Match only rows where `column` is included in the `values` array.\n   *\n   * @param column - The column to filter on\n   * @param values - The values array to filter with\n   */\n  in(column: string, values: unknown[]): this {\n    const cleanedValues = values\n      .map((s) => {\n        // handle postgrest reserved characters\n        // https://postgrest.org/en/v7.0.0/api.html#reserved-characters\n        if (typeof s === 'string' && new RegExp('[,()]').test(s)) return `\"${s}\"`\n        else return `${s}`\n      })\n      .join(',')\n    this.url.searchParams.append(column, `in.(${cleanedValues})`)\n    return this\n  }\n\n  contains<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    value: string | Row[ColumnName][] | Record<string, unknown>\n  ): this\n  contains(column: string, value: string | unknown[] | Record<string, unknown>): this\n  /**\n   * Only relevant for jsonb, array, and range columns. Match only rows where\n   * `column` contains every element appearing in `value`.\n   *\n   * @param column - The jsonb, array, or range column to filter on\n   * @param value - The jsonb, array, or range value to filter with\n   */\n  contains(column: string, value: string | unknown[] | Record<string, unknown>): this {\n    if (typeof value === 'string') {\n      // range types can be inclusive '[', ']' or exclusive '(', ')' so just\n      // keep it simple and accept a string\n      this.url.searchParams.append(column, `cs.${value}`)\n    } else if (Array.isArray(value)) {\n      // array\n      this.url.searchParams.append(column, `cs.{${value.join(',')}}`)\n    } else {\n      // json\n      this.url.searchParams.append(column, `cs.${JSON.stringify(value)}`)\n    }\n    return this\n  }\n\n  containedBy<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    value: string | Row[ColumnName][] | Record<string, unknown>\n  ): this\n  containedBy(column: string, value: string | unknown[] | Record<string, unknown>): this\n  /**\n   * Only relevant for jsonb, array, and range columns. Match only rows where\n   * every element appearing in `column` is contained by `value`.\n   *\n   * @param column - The jsonb, array, or range column to filter on\n   * @param value - The jsonb, array, or range value to filter with\n   */\n  containedBy(column: string, value: string | unknown[] | Record<string, unknown>): this {\n    if (typeof value === 'string') {\n      // range\n      this.url.searchParams.append(column, `cd.${value}`)\n    } else if (Array.isArray(value)) {\n      // array\n      this.url.searchParams.append(column, `cd.{${value.join(',')}}`)\n    } else {\n      // json\n      this.url.searchParams.append(column, `cd.${JSON.stringify(value)}`)\n    }\n    return this\n  }\n\n  rangeGt<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\n  rangeGt(column: string, range: string): this\n  /**\n   * Only relevant for range columns. Match only rows where every element in\n   * `column` is greater than any element in `range`.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n  rangeGt(column: string, range: string): this {\n    this.url.searchParams.append(column, `sr.${range}`)\n    return this\n  }\n\n  rangeGte<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\n  rangeGte(column: string, range: string): this\n  /**\n   * Only relevant for range columns. Match only rows where every element in\n   * `column` is either contained in `range` or greater than any element in\n   * `range`.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n  rangeGte(column: string, range: string): this {\n    this.url.searchParams.append(column, `nxl.${range}`)\n    return this\n  }\n\n  rangeLt<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\n  rangeLt(column: string, range: string): this\n  /**\n   * Only relevant for range columns. Match only rows where every element in\n   * `column` is less than any element in `range`.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n  rangeLt(column: string, range: string): this {\n    this.url.searchParams.append(column, `sl.${range}`)\n    return this\n  }\n\n  rangeLte<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\n  rangeLte(column: string, range: string): this\n  /**\n   * Only relevant for range columns. Match only rows where every element in\n   * `column` is either contained in `range` or less than any element in\n   * `range`.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n  rangeLte(column: string, range: string): this {\n    this.url.searchParams.append(column, `nxr.${range}`)\n    return this\n  }\n\n  rangeAdjacent<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this\n  rangeAdjacent(column: string, range: string): this\n  /**\n   * Only relevant for range columns. Match only rows where `column` is\n   * mutually exclusive to `range` and there can be no element between the two\n   * ranges.\n   *\n   * @param column - The range column to filter on\n   * @param range - The range to filter with\n   */\n  rangeAdjacent(column: string, range: string): this {\n    this.url.searchParams.append(column, `adj.${range}`)\n    return this\n  }\n\n  overlaps<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    value: string | Row[ColumnName][]\n  ): this\n  overlaps(column: string, value: string | unknown[]): this\n  /**\n   * Only relevant for array and range columns. Match only rows where\n   * `column` and `value` have an element in common.\n   *\n   * @param column - The array or range column to filter on\n   * @param value - The array or range value to filter with\n   */\n  overlaps(column: string, value: string | unknown[]): this {\n    if (typeof value === 'string') {\n      // range\n      this.url.searchParams.append(column, `ov.${value}`)\n    } else {\n      // array\n      this.url.searchParams.append(column, `ov.{${value.join(',')}}`)\n    }\n    return this\n  }\n\n  textSearch<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    query: string,\n    options?: { config?: string; type?: 'plain' | 'phrase' | 'websearch' }\n  ): this\n  textSearch(\n    column: string,\n    query: string,\n    options?: { config?: string; type?: 'plain' | 'phrase' | 'websearch' }\n  ): this\n  /**\n   * Only relevant for text and tsvector columns. Match only rows where\n   * `column` matches the query string in `query`.\n   *\n   * @param column - The text or tsvector column to filter on\n   * @param query - The query text to match with\n   * @param options - Named parameters\n   * @param options.config - The text search configuration to use\n   * @param options.type - Change how the `query` text is interpreted\n   */\n  textSearch(\n    column: string,\n    query: string,\n    { config, type }: { config?: string; type?: 'plain' | 'phrase' | 'websearch' } = {}\n  ): this {\n    let typePart = ''\n    if (type === 'plain') {\n      typePart = 'pl'\n    } else if (type === 'phrase') {\n      typePart = 'ph'\n    } else if (type === 'websearch') {\n      typePart = 'w'\n    }\n    const configPart = config === undefined ? '' : `(${config})`\n    this.url.searchParams.append(column, `${typePart}fts${configPart}.${query}`)\n    return this\n  }\n\n  match<ColumnName extends string & keyof Row>(query: Record<ColumnName, Row[ColumnName]>): this\n  match(query: Record<string, unknown>): this\n  /**\n   * Match only rows where each column in `query` keys is equal to its\n   * associated value. Shorthand for multiple `.eq()`s.\n   *\n   * @param query - The object to filter with, with column names as keys mapped\n   * to their filter values\n   */\n  match(query: Record<string, unknown>): this {\n    Object.entries(query).forEach(([column, value]) => {\n      this.url.searchParams.append(column, `eq.${value}`)\n    })\n    return this\n  }\n\n  not<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    operator: FilterOperator,\n    value: Row[ColumnName]\n  ): this\n  not(column: string, operator: string, value: unknown): this\n  /**\n   * Match only rows which doesn't satisfy the filter.\n   *\n   * Unlike most filters, `opearator` and `value` are used as-is and need to\n   * follow [PostgREST\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n   * to make sure they are properly sanitized.\n   *\n   * @param column - The column to filter on\n   * @param operator - The operator to be negated to filter with, following\n   * PostgREST syntax\n   * @param value - The value to filter with, following PostgREST syntax\n   */\n  not(column: string, operator: string, value: unknown): this {\n    this.url.searchParams.append(column, `not.${operator}.${value}`)\n    return this\n  }\n\n  /**\n   * Match only rows which satisfy at least one of the filters.\n   *\n   * Unlike most filters, `filters` is used as-is and needs to follow [PostgREST\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n   * to make sure it's properly sanitized.\n   *\n   * It's currently not possible to do an `.or()` filter across multiple tables.\n   *\n   * @param filters - The filters to use, following PostgREST syntax\n   * @param foreignTable - Set this to filter on foreign tables instead of the\n   * current table\n   */\n  or(filters: string, { foreignTable }: { foreignTable?: string } = {}): this {\n    const key = foreignTable ? `${foreignTable}.or` : 'or'\n    this.url.searchParams.append(key, `(${filters})`)\n    return this\n  }\n\n  filter<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    operator: `${'' | 'not.'}${FilterOperator}`,\n    value: unknown\n  ): this\n  filter(column: string, operator: string, value: unknown): this\n  /**\n   * Match only rows which satisfy the filter. This is an escape hatch - you\n   * should use the specific filter methods wherever possible.\n   *\n   * Unlike most filters, `opearator` and `value` are used as-is and need to\n   * follow [PostgREST\n   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n   * to make sure they are properly sanitized.\n   *\n   * @param column - The column to filter on\n   * @param operator - The operator to filter with, following PostgREST syntax\n   * @param value - The value to filter with, following PostgREST syntax\n   */\n  filter(column: string, operator: string, value: unknown): this {\n    this.url.searchParams.append(column, `${operator}.${value}`)\n    return this\n  }\n}\n","import PostgrestBuilder from './PostgrestBuilder'\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder'\nimport { GetResult } from './select-query-parser'\nimport { Fetch, GenericSchema, GenericTable, GenericView } from './types'\n\nexport default class PostgrestQueryBuilder<\n  Schema extends GenericSchema,\n  Relation extends GenericTable | GenericView,\n  Relationships = Relation extends { Relationships: infer R } ? R : unknown\n> {\n  url: URL\n  headers: Record<string, string>\n  schema?: string\n  signal?: AbortSignal\n  fetch?: Fetch\n\n  constructor(\n    url: URL,\n    {\n      headers = {},\n      schema,\n      fetch,\n    }: {\n      headers?: Record<string, string>\n      schema?: string\n      fetch?: Fetch\n    }\n  ) {\n    this.url = url\n    this.headers = headers\n    this.schema = schema\n    this.fetch = fetch\n  }\n\n  /**\n   * Perform a SELECT query on the table or view.\n   *\n   * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n   *\n   * @param options - Named parameters\n   *\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   *\n   * @param options.count - Count algorithm to use to count rows in the table or view.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  select<\n    Query extends string = '*',\n    ResultOne = GetResult<Schema, Relation['Row'], Relationships, Query>\n  >(\n    columns?: Query,\n    {\n      head = false,\n      count,\n    }: {\n      head?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], ResultOne[], Relationships> {\n    const method = head ? 'HEAD' : 'GET'\n    // Remove whitespaces except when quoted\n    let quoted = false\n    const cleanedColumns = (columns ?? '*')\n      .split('')\n      .map((c) => {\n        if (/\\s/.test(c) && !quoted) {\n          return ''\n        }\n        if (c === '\"') {\n          quoted = !quoted\n        }\n        return c\n      })\n      .join('')\n    this.url.searchParams.set('select', cleanedColumns)\n    if (count) {\n      this.headers['Prefer'] = `count=${count}`\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<ResultOne[]>)\n  }\n\n  /**\n   * Perform an INSERT into the table or view.\n   *\n   * By default, inserted rows are not returned. To return it, chain the call\n   * with `.select()`.\n   *\n   * @param values - The values to insert. Pass an object to insert a single row\n   * or an array to insert multiple rows.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.count - Count algorithm to use to count inserted rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   *\n   * @param options.defaultToNull - Make missing fields default to `null`.\n   * Otherwise, use the default value for the column.\n   */\n  insert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\n    values: Row | Row[],\n    {\n      count,\n      defaultToNull = true,\n    }: {\n      count?: 'exact' | 'planned' | 'estimated'\n      defaultToNull?: boolean\n    } = {}\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], null, Relationships> {\n    const method = 'POST'\n\n    const prefersHeaders = []\n    if (this.headers['Prefer']) {\n      prefersHeaders.push(this.headers['Prefer'])\n    }\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (!defaultToNull) {\n      prefersHeaders.push('missing=default')\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    if (Array.isArray(values)) {\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), [] as string[])\n      if (columns.length > 0) {\n        const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`)\n        this.url.searchParams.set('columns', uniqueColumns.join(','))\n      }\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      body: values,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<null>)\n  }\n\n  /**\n   * Perform an UPSERT on the table or view. Depending on the column(s) passed\n   * to `onConflict`, `.upsert()` allows you to perform the equivalent of\n   * `.insert()` if a row with the corresponding `onConflict` columns doesn't\n   * exist, or if it does exist, perform an alternative action depending on\n   * `ignoreDuplicates`.\n   *\n   * By default, upserted rows are not returned. To return it, chain the call\n   * with `.select()`.\n   *\n   * @param values - The values to upsert with. Pass an object to upsert a\n   * single row or an array to upsert multiple rows.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how\n   * duplicate rows are determined. Two rows are duplicates if all the\n   * `onConflict` columns are equal.\n   *\n   * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If\n   * `false`, duplicate rows are merged with existing rows.\n   *\n   * @param options.count - Count algorithm to use to count upserted rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   *\n   * @param options.defaultToNull - Make missing fields default to `null`.\n   * Otherwise, use the default value for the column. This only applies when\n   * inserting new rows, not when merging with existing rows under\n   * `ignoreDuplicates: false`.\n   */\n  upsert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\n    values: Row | Row[],\n    {\n      onConflict,\n      ignoreDuplicates = false,\n      count,\n      defaultToNull = true,\n    }: {\n      onConflict?: string\n      ignoreDuplicates?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n      defaultToNull?: boolean\n    } = {}\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], null, Relationships> {\n    const method = 'POST'\n\n    const prefersHeaders = [`resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`]\n\n    if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict)\n    if (this.headers['Prefer']) {\n      prefersHeaders.push(this.headers['Prefer'])\n    }\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (!defaultToNull) {\n      prefersHeaders.push('missing=default')\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    if (Array.isArray(values)) {\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), [] as string[])\n      if (columns.length > 0) {\n        const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`)\n        this.url.searchParams.set('columns', uniqueColumns.join(','))\n      }\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      body: values,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<null>)\n  }\n\n  /**\n   * Perform an UPDATE on the table or view.\n   *\n   * By default, updated rows are not returned. To return it, chain the call\n   * with `.select()` after filters.\n   *\n   * @param values - The values to update with\n   *\n   * @param options - Named parameters\n   *\n   * @param options.count - Count algorithm to use to count updated rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  update<Row extends Relation extends { Update: unknown } ? Relation['Update'] : never>(\n    values: Row,\n    {\n      count,\n    }: {\n      count?: 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], null, Relationships> {\n    const method = 'PATCH'\n    const prefersHeaders = []\n    if (this.headers['Prefer']) {\n      prefersHeaders.push(this.headers['Prefer'])\n    }\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      body: values,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<null>)\n  }\n\n  /**\n   * Perform a DELETE on the table or view.\n   *\n   * By default, deleted rows are not returned. To return it, chain the call\n   * with `.select()` after filters.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.count - Count algorithm to use to count deleted rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  delete({\n    count,\n  }: {\n    count?: 'exact' | 'planned' | 'estimated'\n  } = {}): PostgrestFilterBuilder<Schema, Relation['Row'], null, Relationships> {\n    const method = 'DELETE'\n    const prefersHeaders = []\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer'])\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<null>)\n  }\n}\n","export const version = '1.7.0'\n","import { version } from './version'\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `postgrest-js/${version}` }\n","import PostgrestQueryBuilder from './PostgrestQueryBuilder'\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder'\nimport PostgrestBuilder from './PostgrestBuilder'\nimport { DEFAULT_HEADERS } from './constants'\nimport { Fetch, GenericSchema } from './types'\n\n/**\n * PostgREST client.\n *\n * @typeParam Database - Types for the schema from the [type\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\n *\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\n * literal, the same one passed to the constructor. If the schema is not\n * `\"public\"`, this must be supplied manually.\n */\nexport default class PostgrestClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database,\n  Schema extends GenericSchema = Database[SchemaName] extends GenericSchema\n    ? Database[SchemaName]\n    : any\n> {\n  url: string\n  headers: Record<string, string>\n  schema?: SchemaName\n  fetch?: Fetch\n\n  // TODO: Add back shouldThrowOnError once we figure out the typings\n  /**\n   * Creates a PostgREST client.\n   *\n   * @param url - URL of the PostgREST endpoint\n   * @param options - Named parameters\n   * @param options.headers - Custom headers\n   * @param options.schema - Postgres schema to switch to\n   * @param options.fetch - Custom fetch\n   */\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      fetch,\n    }: {\n      headers?: Record<string, string>\n      schema?: SchemaName\n      fetch?: Fetch\n    } = {}\n  ) {\n    this.url = url\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\n    this.schema = schema\n    this.fetch = fetch\n  }\n\n  from<\n    TableName extends string & keyof Schema['Tables'],\n    Table extends Schema['Tables'][TableName]\n  >(relation: TableName): PostgrestQueryBuilder<Schema, Table>\n  from<ViewName extends string & keyof Schema['Views'], View extends Schema['Views'][ViewName]>(\n    relation: ViewName\n  ): PostgrestQueryBuilder<Schema, View>\n  from(relation: string): PostgrestQueryBuilder<Schema, any>\n  /**\n   * Perform a query on a table or a view.\n   *\n   * @param relation - The table or view name to query\n   */\n  from(relation: string): PostgrestQueryBuilder<Schema, any> {\n    const url = new URL(`${this.url}/${relation}`)\n    return new PostgrestQueryBuilder<Schema, any>(url, {\n      headers: { ...this.headers },\n      schema: this.schema,\n      fetch: this.fetch,\n    })\n  }\n\n  /**\n   * Perform a function call.\n   *\n   * @param fn - The function name to call\n   * @param args - The arguments to pass to the function call\n   * @param options - Named parameters\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   * @param options.count - Count algorithm to use to count rows returned by the\n   * function. Only applicable for [set-returning\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  rpc<\n    FunctionName extends string & keyof Schema['Functions'],\n    Function_ extends Schema['Functions'][FunctionName]\n  >(\n    fn: FunctionName,\n    args: Function_['Args'] = {},\n    {\n      head = false,\n      count,\n    }: {\n      head?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<\n    Schema,\n    Function_['Returns'] extends any[]\n      ? Function_['Returns'][number] extends Record<string, unknown>\n        ? Function_['Returns'][number]\n        : never\n      : never,\n    Function_['Returns']\n  > {\n    let method: 'HEAD' | 'POST'\n    const url = new URL(`${this.url}/rpc/${fn}`)\n    let body: unknown | undefined\n    if (head) {\n      method = 'HEAD'\n      Object.entries(args).forEach(([name, value]) => {\n        url.searchParams.append(name, `${value}`)\n      })\n    } else {\n      method = 'POST'\n      body = args\n    }\n\n    const headers = { ...this.headers }\n    if (count) {\n      headers['Prefer'] = `count=${count}`\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url,\n      headers,\n      schema: this.schema,\n      body,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<Function_['Returns']>)\n  }\n}\n","var naiveFallback = function () {\n\tif (typeof self === \"object\" && self) return self;\n\tif (typeof window === \"object\" && window) return window;\n\tthrow new Error(\"Unable to resolve global `this`\");\n};\n\nmodule.exports = (function () {\n\tif (this) return this;\n\n\t// Unexpected strict mode (may happen if e.g. bundled into ESM module)\n\n\t// Fallback to standard globalThis if available\n\tif (typeof globalThis === \"object\" && globalThis) return globalThis;\n\n\t// Thanks @mathiasbynens -> https://mathiasbynens.be/notes/globalthis\n\t// In all ES5+ engines global object inherits from Object.prototype\n\t// (if you approached one that doesn't please report)\n\ttry {\n\t\tObject.defineProperty(Object.prototype, \"__global__\", {\n\t\t\tget: function () { return this; },\n\t\t\tconfigurable: true\n\t\t});\n\t} catch (error) {\n\t\t// Unfortunate case of updates to Object.prototype being restricted\n\t\t// via preventExtensions, seal or freeze\n\t\treturn naiveFallback();\n\t}\n\ttry {\n\t\t// Safari case (window.__global__ works, but __global__ does not)\n\t\tif (!__global__) return naiveFallback();\n\t\treturn __global__;\n\t} finally {\n\t\tdelete Object.prototype.__global__;\n\t}\n})();\n","module.exports={name:\"websocket\",description:\"Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.\",keywords:[\"websocket\",\"websockets\",\"socket\",\"networking\",\"comet\",\"push\",\"RFC-6455\",\"realtime\",\"server\",\"client\"],author:\"Brian McKelvey <theturtle32@gmail.com> (https://github.com/theturtle32)\",contributors:[\"Iñaki Baz Castillo <ibc@aliax.net> (http://dev.sipdoc.net)\"],version:\"1.0.34\",repository:{type:\"git\",url:\"https://github.com/theturtle32/WebSocket-Node.git\"},homepage:\"https://github.com/theturtle32/WebSocket-Node\",engines:{node:\">=4.0.0\"},dependencies:{bufferutil:\"^4.0.1\",debug:\"^2.2.0\",\"es5-ext\":\"^0.10.50\",\"typedarray-to-buffer\":\"^3.1.5\",\"utf-8-validate\":\"^5.0.2\",yaeti:\"^0.0.6\"},devDependencies:{\"buffer-equal\":\"^1.0.0\",gulp:\"^4.0.2\",\"gulp-jshint\":\"^2.0.4\",\"jshint-stylish\":\"^2.2.1\",jshint:\"^2.0.0\",tape:\"^4.9.1\"},config:{verbose:!1},scripts:{test:\"tape test/unit/*.js\",gulp:\"gulp\"},main:\"index\",directories:{lib:\"./lib\"},browser:\"lib/browser.js\",license:\"Apache-2.0\"};","module.exports = require('../package.json').version;\n","var _globalThis;\nif (typeof globalThis === 'object') {\n\t_globalThis = globalThis;\n} else {\n\ttry {\n\t\t_globalThis = require('es5-ext/global');\n\t} catch (error) {\n\t} finally {\n\t\tif (!_globalThis && typeof window !== 'undefined') { _globalThis = window; }\n\t\tif (!_globalThis) { throw new Error('Could not determine global this'); }\n\t}\n}\n\nvar NativeWebSocket = _globalThis.WebSocket || _globalThis.MozWebSocket;\nvar websocket_version = require('./version');\n\n\n/**\n * Expose a W3C WebSocket class with just one or two arguments.\n */\nfunction W3CWebSocket(uri, protocols) {\n\tvar native_instance;\n\n\tif (protocols) {\n\t\tnative_instance = new NativeWebSocket(uri, protocols);\n\t}\n\telse {\n\t\tnative_instance = new NativeWebSocket(uri);\n\t}\n\n\t/**\n\t * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket\n\t * class). Since it is an Object it will be returned as it is when creating an\n\t * instance of W3CWebSocket via 'new W3CWebSocket()'.\n\t *\n\t * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2\n\t */\n\treturn native_instance;\n}\nif (NativeWebSocket) {\n\t['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'].forEach(function(prop) {\n\t\tObject.defineProperty(W3CWebSocket, prop, {\n\t\t\tget: function() { return NativeWebSocket[prop]; }\n\t\t});\n\t});\n}\n\n/**\n * Module exports.\n */\nmodule.exports = {\n    'w3cwebsocket' : NativeWebSocket ? W3CWebSocket : null,\n    'version'      : websocket_version\n};\n","export const version = '2.7.2'\n","import { version } from './version'\n\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `realtime-js/${version}` }\n\nexport const VSN: string = '1.0.0'\n\nexport const DEFAULT_TIMEOUT = 10000\n\nexport const WS_CLOSE_NORMAL = 1000\n\nexport enum SOCKET_STATES {\n  connecting = 0,\n  open = 1,\n  closing = 2,\n  closed = 3,\n}\n\nexport enum CHANNEL_STATES {\n  closed = 'closed',\n  errored = 'errored',\n  joined = 'joined',\n  joining = 'joining',\n  leaving = 'leaving',\n}\n\nexport enum CHANNEL_EVENTS {\n  close = 'phx_close',\n  error = 'phx_error',\n  join = 'phx_join',\n  reply = 'phx_reply',\n  leave = 'phx_leave',\n  access_token = 'access_token',\n}\n\nexport enum TRANSPORTS {\n  websocket = 'websocket',\n}\n\nexport enum CONNECTION_STATE {\n  Connecting = 'connecting',\n  Open = 'open',\n  Closing = 'closing',\n  Closed = 'closed',\n}\n","/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nexport default class Timer {\n  timer: number | undefined = undefined\n  tries: number = 0\n\n  constructor(public callback: Function, public timerCalc: Function) {\n    this.callback = callback\n    this.timerCalc = timerCalc\n  }\n\n  reset() {\n    this.tries = 0\n    clearTimeout(this.timer)\n  }\n\n  // Cancels any previous scheduleTimeout and schedules callback\n  scheduleTimeout() {\n    clearTimeout(this.timer)\n\n    this.timer = <any>setTimeout(() => {\n      this.tries = this.tries + 1\n      this.callback()\n    }, this.timerCalc(this.tries + 1))\n  }\n}\n","// This file draws heavily from https://github.com/phoenixframework/phoenix/commit/cf098e9cf7a44ee6479d31d911a97d3c7430c6fe\n// License: https://github.com/phoenixframework/phoenix/blob/master/LICENSE.md\n\nexport default class Serializer {\n  HEADER_LENGTH = 1\n\n  decode(rawPayload: ArrayBuffer | string, callback: Function) {\n    if (rawPayload.constructor === ArrayBuffer) {\n      return callback(this._binaryDecode(rawPayload))\n    }\n\n    if (typeof rawPayload === 'string') {\n      return callback(JSON.parse(rawPayload))\n    }\n\n    return callback({})\n  }\n\n  private _binaryDecode(buffer: ArrayBuffer) {\n    const view = new DataView(buffer)\n    const decoder = new TextDecoder()\n\n    return this._decodeBroadcast(buffer, view, decoder)\n  }\n\n  private _decodeBroadcast(\n    buffer: ArrayBuffer,\n    view: DataView,\n    decoder: TextDecoder\n  ): {\n    ref: null\n    topic: string\n    event: string\n    payload: { [key: string]: any }\n  } {\n    const topicSize = view.getUint8(1)\n    const eventSize = view.getUint8(2)\n    let offset = this.HEADER_LENGTH + 2\n    const topic = decoder.decode(buffer.slice(offset, offset + topicSize))\n    offset = offset + topicSize\n    const event = decoder.decode(buffer.slice(offset, offset + eventSize))\n    offset = offset + eventSize\n    const data = JSON.parse(\n      decoder.decode(buffer.slice(offset, buffer.byteLength))\n    )\n\n    return { ref: null, topic: topic, event: event, payload: data }\n  }\n}\n","import { DEFAULT_TIMEOUT } from '../lib/constants'\nimport type RealtimeChannel from '../RealtimeChannel'\n\nexport default class Push {\n  sent: boolean = false\n  timeoutTimer: number | undefined = undefined\n  ref: string = ''\n  receivedResp: {\n    status: string\n    response: { [key: string]: any }\n  } | null = null\n  recHooks: {\n    status: string\n    callback: Function\n  }[] = []\n  refEvent: string | null = null\n  rateLimited: boolean = false\n\n  /**\n   * Initializes the Push\n   *\n   * @param channel The Channel\n   * @param event The event, for example `\"phx_join\"`\n   * @param payload The payload, for example `{user_id: 123}`\n   * @param timeout The push timeout in milliseconds\n   */\n  constructor(\n    public channel: RealtimeChannel,\n    public event: string,\n    public payload: { [key: string]: any } = {},\n    public timeout: number = DEFAULT_TIMEOUT\n  ) {}\n\n  resend(timeout: number) {\n    this.timeout = timeout\n    this._cancelRefEvent()\n    this.ref = ''\n    this.refEvent = null\n    this.receivedResp = null\n    this.sent = false\n    this.send()\n  }\n\n  send() {\n    if (this._hasReceived('timeout')) {\n      return\n    }\n    this.startTimeout()\n    this.sent = true\n    const status = this.channel.socket.push({\n      topic: this.channel.topic,\n      event: this.event,\n      payload: this.payload,\n      ref: this.ref,\n      join_ref: this.channel._joinRef(),\n    })\n    if (status === 'rate limited') {\n      this.rateLimited = true\n    }\n  }\n\n  updatePayload(payload: { [key: string]: any }): void {\n    this.payload = { ...this.payload, ...payload }\n  }\n\n  receive(status: string, callback: Function) {\n    if (this._hasReceived(status)) {\n      callback(this.receivedResp?.response)\n    }\n\n    this.recHooks.push({ status, callback })\n    return this\n  }\n\n  startTimeout() {\n    if (this.timeoutTimer) {\n      return\n    }\n    this.ref = this.channel.socket._makeRef()\n    this.refEvent = this.channel._replyEventName(this.ref)\n\n    const callback = (payload: any) => {\n      this._cancelRefEvent()\n      this._cancelTimeout()\n      this.receivedResp = payload\n      this._matchReceive(payload)\n    }\n\n    this.channel._on(this.refEvent, {}, callback)\n\n    this.timeoutTimer = <any>setTimeout(() => {\n      this.trigger('timeout', {})\n    }, this.timeout)\n  }\n\n  trigger(status: string, response: any) {\n    if (this.refEvent)\n      this.channel._trigger(this.refEvent, { status, response })\n  }\n\n  destroy() {\n    this._cancelRefEvent()\n    this._cancelTimeout()\n  }\n\n  private _cancelRefEvent() {\n    if (!this.refEvent) {\n      return\n    }\n\n    this.channel._off(this.refEvent, {})\n  }\n\n  private _cancelTimeout() {\n    clearTimeout(this.timeoutTimer)\n    this.timeoutTimer = undefined\n  }\n\n  private _matchReceive({\n    status,\n    response,\n  }: {\n    status: string\n    response: Function\n  }) {\n    this.recHooks\n      .filter((h) => h.status === status)\n      .forEach((h) => h.callback(response))\n  }\n\n  private _hasReceived(status: string) {\n    return this.receivedResp && this.receivedResp.status === status\n  }\n}\n","/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\n\nimport type {\n  PresenceOpts,\n  PresenceOnJoinCallback,\n  PresenceOnLeaveCallback,\n} from 'phoenix'\nimport type RealtimeChannel from './RealtimeChannel'\n\ntype Presence<T extends { [key: string]: any } = {}> = {\n  presence_ref: string\n} & T\n\nexport type RealtimePresenceState<T extends { [key: string]: any } = {}> = {\n  [key: string]: Presence<T>[]\n}\n\nexport type RealtimePresenceJoinPayload<T extends { [key: string]: any }> = {\n  event: `${REALTIME_PRESENCE_LISTEN_EVENTS.JOIN}`\n  key: string\n  currentPresences: Presence<T>[]\n  newPresences: Presence<T>[]\n}\n\nexport type RealtimePresenceLeavePayload<T extends { [key: string]: any }> = {\n  event: `${REALTIME_PRESENCE_LISTEN_EVENTS.LEAVE}`\n  key: string\n  currentPresences: Presence<T>[]\n  leftPresences: Presence<T>[]\n}\n\nexport enum REALTIME_PRESENCE_LISTEN_EVENTS {\n  SYNC = 'sync',\n  JOIN = 'join',\n  LEAVE = 'leave',\n}\n\ntype PresenceDiff = {\n  joins: RealtimePresenceState\n  leaves: RealtimePresenceState\n}\n\ntype RawPresenceState = {\n  [key: string]: {\n    metas: {\n      phx_ref?: string\n      phx_ref_prev?: string\n      [key: string]: any\n    }[]\n  }\n}\n\ntype RawPresenceDiff = {\n  joins: RawPresenceState\n  leaves: RawPresenceState\n}\n\ntype PresenceChooser<T> = (key: string, presences: Presence[]) => T\n\nexport default class RealtimePresence {\n  state: RealtimePresenceState = {}\n  pendingDiffs: RawPresenceDiff[] = []\n  joinRef: string | null = null\n  caller: {\n    onJoin: PresenceOnJoinCallback\n    onLeave: PresenceOnLeaveCallback\n    onSync: () => void\n  } = {\n    onJoin: () => {},\n    onLeave: () => {},\n    onSync: () => {},\n  }\n\n  /**\n   * Initializes the Presence.\n   *\n   * @param channel - The RealtimeChannel\n   * @param opts - The options,\n   *        for example `{events: {state: 'state', diff: 'diff'}}`\n   */\n  constructor(public channel: RealtimeChannel, opts?: PresenceOpts) {\n    const events = opts?.events || {\n      state: 'presence_state',\n      diff: 'presence_diff',\n    }\n\n    this.channel._on(events.state, {}, (newState: RawPresenceState) => {\n      const { onJoin, onLeave, onSync } = this.caller\n\n      this.joinRef = this.channel._joinRef()\n\n      this.state = RealtimePresence.syncState(\n        this.state,\n        newState,\n        onJoin,\n        onLeave\n      )\n\n      this.pendingDiffs.forEach((diff) => {\n        this.state = RealtimePresence.syncDiff(\n          this.state,\n          diff,\n          onJoin,\n          onLeave\n        )\n      })\n\n      this.pendingDiffs = []\n\n      onSync()\n    })\n\n    this.channel._on(events.diff, {}, (diff: RawPresenceDiff) => {\n      const { onJoin, onLeave, onSync } = this.caller\n\n      if (this.inPendingSyncState()) {\n        this.pendingDiffs.push(diff)\n      } else {\n        this.state = RealtimePresence.syncDiff(\n          this.state,\n          diff,\n          onJoin,\n          onLeave\n        )\n\n        onSync()\n      }\n    })\n\n    this.onJoin((key, currentPresences, newPresences) => {\n      this.channel._trigger('presence', {\n        event: 'join',\n        key,\n        currentPresences,\n        newPresences,\n      })\n    })\n\n    this.onLeave((key, currentPresences, leftPresences) => {\n      this.channel._trigger('presence', {\n        event: 'leave',\n        key,\n        currentPresences,\n        leftPresences,\n      })\n    })\n\n    this.onSync(() => {\n      this.channel._trigger('presence', { event: 'sync' })\n    })\n  }\n\n  /**\n   * Used to sync the list of presences on the server with the\n   * client's state.\n   *\n   * An optional `onJoin` and `onLeave` callback can be provided to\n   * react to changes in the client's local presences across\n   * disconnects and reconnects with the server.\n   *\n   * @internal\n   */\n  private static syncState(\n    currentState: RealtimePresenceState,\n    newState: RawPresenceState | RealtimePresenceState,\n    onJoin: PresenceOnJoinCallback,\n    onLeave: PresenceOnLeaveCallback\n  ): RealtimePresenceState {\n    const state = this.cloneDeep(currentState)\n    const transformedState = this.transformState(newState)\n    const joins: RealtimePresenceState = {}\n    const leaves: RealtimePresenceState = {}\n\n    this.map(state, (key: string, presences: Presence[]) => {\n      if (!transformedState[key]) {\n        leaves[key] = presences\n      }\n    })\n\n    this.map(transformedState, (key, newPresences: Presence[]) => {\n      const currentPresences: Presence[] = state[key]\n\n      if (currentPresences) {\n        const newPresenceRefs = newPresences.map(\n          (m: Presence) => m.presence_ref\n        )\n        const curPresenceRefs = currentPresences.map(\n          (m: Presence) => m.presence_ref\n        )\n        const joinedPresences: Presence[] = newPresences.filter(\n          (m: Presence) => curPresenceRefs.indexOf(m.presence_ref) < 0\n        )\n        const leftPresences: Presence[] = currentPresences.filter(\n          (m: Presence) => newPresenceRefs.indexOf(m.presence_ref) < 0\n        )\n\n        if (joinedPresences.length > 0) {\n          joins[key] = joinedPresences\n        }\n\n        if (leftPresences.length > 0) {\n          leaves[key] = leftPresences\n        }\n      } else {\n        joins[key] = newPresences\n      }\n    })\n\n    return this.syncDiff(state, { joins, leaves }, onJoin, onLeave)\n  }\n\n  /**\n   * Used to sync a diff of presence join and leave events from the\n   * server, as they happen.\n   *\n   * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n   * `onLeave` callbacks to react to a user joining or leaving from a\n   * device.\n   *\n   * @internal\n   */\n  private static syncDiff(\n    state: RealtimePresenceState,\n    diff: RawPresenceDiff | PresenceDiff,\n    onJoin: PresenceOnJoinCallback,\n    onLeave: PresenceOnLeaveCallback\n  ): RealtimePresenceState {\n    const { joins, leaves } = {\n      joins: this.transformState(diff.joins),\n      leaves: this.transformState(diff.leaves),\n    }\n\n    if (!onJoin) {\n      onJoin = () => {}\n    }\n\n    if (!onLeave) {\n      onLeave = () => {}\n    }\n\n    this.map(joins, (key, newPresences: Presence[]) => {\n      const currentPresences: Presence[] = state[key] ?? []\n      state[key] = this.cloneDeep(newPresences)\n\n      if (currentPresences.length > 0) {\n        const joinedPresenceRefs = state[key].map(\n          (m: Presence) => m.presence_ref\n        )\n        const curPresences: Presence[] = currentPresences.filter(\n          (m: Presence) => joinedPresenceRefs.indexOf(m.presence_ref) < 0\n        )\n\n        state[key].unshift(...curPresences)\n      }\n\n      onJoin(key, currentPresences, newPresences)\n    })\n\n    this.map(leaves, (key, leftPresences: Presence[]) => {\n      let currentPresences: Presence[] = state[key]\n\n      if (!currentPresences) return\n\n      const presenceRefsToRemove = leftPresences.map(\n        (m: Presence) => m.presence_ref\n      )\n      currentPresences = currentPresences.filter(\n        (m: Presence) => presenceRefsToRemove.indexOf(m.presence_ref) < 0\n      )\n\n      state[key] = currentPresences\n\n      onLeave(key, currentPresences, leftPresences)\n\n      if (currentPresences.length === 0) delete state[key]\n    })\n\n    return state\n  }\n\n  /** @internal */\n  private static map<T = any>(\n    obj: RealtimePresenceState,\n    func: PresenceChooser<T>\n  ): T[] {\n    return Object.getOwnPropertyNames(obj).map((key) => func(key, obj[key]))\n  }\n\n  /**\n   * Remove 'metas' key\n   * Change 'phx_ref' to 'presence_ref'\n   * Remove 'phx_ref' and 'phx_ref_prev'\n   *\n   * @example\n   * // returns {\n   *  abc123: [\n   *    { presence_ref: '2', user_id: 1 },\n   *    { presence_ref: '3', user_id: 2 }\n   *  ]\n   * }\n   * RealtimePresence.transformState({\n   *  abc123: {\n   *    metas: [\n   *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n   *      { phx_ref: '3', user_id: 2 }\n   *    ]\n   *  }\n   * })\n   *\n   * @internal\n   */\n  private static transformState(\n    state: RawPresenceState | RealtimePresenceState\n  ): RealtimePresenceState {\n    state = this.cloneDeep(state)\n\n    return Object.getOwnPropertyNames(state).reduce((newState, key) => {\n      const presences = state[key]\n\n      if ('metas' in presences) {\n        newState[key] = presences.metas.map((presence) => {\n          presence['presence_ref'] = presence['phx_ref']\n\n          delete presence['phx_ref']\n          delete presence['phx_ref_prev']\n\n          return presence\n        }) as Presence[]\n      } else {\n        newState[key] = presences\n      }\n\n      return newState\n    }, {} as RealtimePresenceState)\n  }\n\n  /** @internal */\n  private static cloneDeep(obj: { [key: string]: any }) {\n    return JSON.parse(JSON.stringify(obj))\n  }\n\n  /** @internal */\n  private onJoin(callback: PresenceOnJoinCallback): void {\n    this.caller.onJoin = callback\n  }\n\n  /** @internal */\n  private onLeave(callback: PresenceOnLeaveCallback): void {\n    this.caller.onLeave = callback\n  }\n\n  /** @internal */\n  private onSync(callback: () => void): void {\n    this.caller.onSync = callback\n  }\n\n  /** @internal */\n  private inPendingSyncState(): boolean {\n    return !this.joinRef || this.joinRef !== this.channel._joinRef()\n  }\n}\n","/**\n * Helpers to convert the change Payload into native JS types.\n */\n\n// Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\n// 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\n\nexport enum PostgresTypes {\n  abstime = 'abstime',\n  bool = 'bool',\n  date = 'date',\n  daterange = 'daterange',\n  float4 = 'float4',\n  float8 = 'float8',\n  int2 = 'int2',\n  int4 = 'int4',\n  int4range = 'int4range',\n  int8 = 'int8',\n  int8range = 'int8range',\n  json = 'json',\n  jsonb = 'jsonb',\n  money = 'money',\n  numeric = 'numeric',\n  oid = 'oid',\n  reltime = 'reltime',\n  text = 'text',\n  time = 'time',\n  timestamp = 'timestamp',\n  timestamptz = 'timestamptz',\n  timetz = 'timetz',\n  tsrange = 'tsrange',\n  tstzrange = 'tstzrange',\n}\n\ntype Columns = {\n  name: string // the column name. eg: \"user_id\"\n  type: string // the column type. eg: \"uuid\"\n  flags?: string[] // any special flags for the column. eg: [\"key\"]\n  type_modifier?: number // the type modifier. eg: 4294967295\n}[]\n\ntype BaseValue = null | string | number | boolean\ntype RecordValue = BaseValue | BaseValue[]\n\ntype Record = {\n  [key: string]: RecordValue\n}\n\n/**\n * Takes an array of columns and an object of string values then converts each string value\n * to its mapped type.\n *\n * @param {{name: String, type: String}[]} columns\n * @param {Object} record\n * @param {Object} options The map of various options that can be applied to the mapper\n * @param {Array} options.skipTypes The array of types that should not be converted\n *\n * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\n * //=>{ first_name: 'Paul', age: 33 }\n */\nexport const convertChangeData = (\n  columns: Columns,\n  record: Record,\n  options: { skipTypes?: string[] } = {}\n): Record => {\n  const skipTypes = options.skipTypes ?? []\n\n  return Object.keys(record).reduce((acc, rec_key) => {\n    acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes)\n    return acc\n  }, {} as Record)\n}\n\n/**\n * Converts the value of an individual column.\n *\n * @param {String} columnName The column that you want to convert\n * @param {{name: String, type: String}[]} columns All of the columns\n * @param {Object} record The map of string values\n * @param {Array} skipTypes An array of types that should not be converted\n * @return {object} Useless information\n *\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\n * //=> 33\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\n * //=> \"33\"\n */\nexport const convertColumn = (\n  columnName: string,\n  columns: Columns,\n  record: Record,\n  skipTypes: string[]\n): RecordValue => {\n  const column = columns.find((x) => x.name === columnName)\n  const colType = column?.type\n  const value = record[columnName]\n\n  if (colType && !skipTypes.includes(colType)) {\n    return convertCell(colType, value)\n  }\n\n  return noop(value)\n}\n\n/**\n * If the value of the cell is `null`, returns null.\n * Otherwise converts the string value to the correct type.\n * @param {String} type A postgres column type\n * @param {String} value The cell value\n *\n * @example convertCell('bool', 't')\n * //=> true\n * @example convertCell('int8', '10')\n * //=> 10\n * @example convertCell('_int4', '{1,2,3,4}')\n * //=> [1,2,3,4]\n */\nexport const convertCell = (type: string, value: RecordValue): RecordValue => {\n  // if data type is an array\n  if (type.charAt(0) === '_') {\n    const dataType = type.slice(1, type.length)\n    return toArray(value, dataType)\n  }\n\n  // If not null, convert to correct type.\n  switch (type) {\n    case PostgresTypes.bool:\n      return toBoolean(value)\n    case PostgresTypes.float4:\n    case PostgresTypes.float8:\n    case PostgresTypes.int2:\n    case PostgresTypes.int4:\n    case PostgresTypes.int8:\n    case PostgresTypes.numeric:\n    case PostgresTypes.oid:\n      return toNumber(value)\n    case PostgresTypes.json:\n    case PostgresTypes.jsonb:\n      return toJson(value)\n    case PostgresTypes.timestamp:\n      return toTimestampString(value) // Format to be consistent with PostgREST\n    case PostgresTypes.abstime: // To allow users to cast it based on Timezone\n    case PostgresTypes.date: // To allow users to cast it based on Timezone\n    case PostgresTypes.daterange:\n    case PostgresTypes.int4range:\n    case PostgresTypes.int8range:\n    case PostgresTypes.money:\n    case PostgresTypes.reltime: // To allow users to cast it based on Timezone\n    case PostgresTypes.text:\n    case PostgresTypes.time: // To allow users to cast it based on Timezone\n    case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\n    case PostgresTypes.timetz: // To allow users to cast it based on Timezone\n    case PostgresTypes.tsrange:\n    case PostgresTypes.tstzrange:\n      return noop(value)\n    default:\n      // Return the value for remaining types\n      return noop(value)\n  }\n}\n\nconst noop = (value: RecordValue): RecordValue => {\n  return value\n}\nexport const toBoolean = (value: RecordValue): RecordValue => {\n  switch (value) {\n    case 't':\n      return true\n    case 'f':\n      return false\n    default:\n      return value\n  }\n}\nexport const toNumber = (value: RecordValue): RecordValue => {\n  if (typeof value === 'string') {\n    const parsedValue = parseFloat(value)\n    if (!Number.isNaN(parsedValue)) {\n      return parsedValue\n    }\n  }\n  return value\n}\nexport const toJson = (value: RecordValue): RecordValue => {\n  if (typeof value === 'string') {\n    try {\n      return JSON.parse(value)\n    } catch (error) {\n      console.log(`JSON parse error: ${error}`)\n      return value\n    }\n  }\n  return value\n}\n\n/**\n * Converts a Postgres Array into a native JS array\n *\n * @example toArray('{}', 'int4')\n * //=> []\n * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\n * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\n * @example toArray([1,2,3,4], 'int4')\n * //=> [1,2,3,4]\n */\nexport const toArray = (value: RecordValue, type: string): RecordValue => {\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  const lastIdx = value.length - 1\n  const closeBrace = value[lastIdx]\n  const openBrace = value[0]\n\n  // Confirm value is a Postgres array by checking curly brackets\n  if (openBrace === '{' && closeBrace === '}') {\n    let arr\n    const valTrim = value.slice(1, lastIdx)\n\n    // TODO: find a better solution to separate Postgres array data\n    try {\n      arr = JSON.parse('[' + valTrim + ']')\n    } catch (_) {\n      // WARNING: splitting on comma does not cover all edge cases\n      arr = valTrim ? valTrim.split(',') : []\n    }\n\n    return arr.map((val: BaseValue) => convertCell(type, val))\n  }\n\n  return value\n}\n\n/**\n * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\n * See https://github.com/supabase/supabase/issues/18\n *\n * @example toTimestampString('2019-09-10 00:00:00')\n * //=> '2019-09-10T00:00:00'\n */\nexport const toTimestampString = (value: RecordValue): RecordValue => {\n  if (typeof value === 'string') {\n    return value.replace(' ', 'T')\n  }\n\n  return value\n}\n","import { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants'\nimport Push from './lib/push'\nimport type RealtimeClient from './RealtimeClient'\nimport Timer from './lib/timer'\nimport RealtimePresence, {\n  REALTIME_PRESENCE_LISTEN_EVENTS,\n} from './RealtimePresence'\nimport type {\n  RealtimePresenceJoinPayload,\n  RealtimePresenceLeavePayload,\n  RealtimePresenceState,\n} from './RealtimePresence'\nimport * as Transformers from './lib/transformers'\n\nexport type RealtimeChannelOptions = {\n  config: {\n    /**\n     * self option enables client to receive message it broadcast\n     * ack option instructs server to acknowledge that broadcast message was received\n     */\n    broadcast?: { self?: boolean; ack?: boolean }\n    /**\n     * key option is used to track presence payload across clients\n     */\n    presence?: { key?: string }\n  }\n}\n\ntype RealtimePostgresChangesPayloadBase = {\n  schema: string\n  table: string\n  commit_timestamp: string\n  errors: string[]\n}\n\nexport type RealtimePostgresInsertPayload<T extends { [key: string]: any }> =\n  RealtimePostgresChangesPayloadBase & {\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.INSERT}`\n    new: T\n    old: {}\n  }\n\nexport type RealtimePostgresUpdatePayload<T extends { [key: string]: any }> =\n  RealtimePostgresChangesPayloadBase & {\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.UPDATE}`\n    new: T\n    old: Partial<T>\n  }\n\nexport type RealtimePostgresDeletePayload<T extends { [key: string]: any }> =\n  RealtimePostgresChangesPayloadBase & {\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.DELETE}`\n    new: {}\n    old: Partial<T>\n  }\n\nexport type RealtimePostgresChangesPayload<T extends { [key: string]: any }> =\n  | RealtimePostgresInsertPayload<T>\n  | RealtimePostgresUpdatePayload<T>\n  | RealtimePostgresDeletePayload<T>\n\nexport type RealtimePostgresChangesFilter<\n  T extends `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT}`\n> = {\n  /**\n   * The type of database change to listen to.\n   */\n  event: T\n  /**\n   * The database schema to listen to.\n   */\n  schema: string\n  /**\n   * The database table to listen to.\n   */\n  table?: string\n  /**\n   * Receive database changes when filter is matched.\n   */\n  filter?: string\n}\n\nexport type RealtimeChannelSendResponse = 'ok' | 'timed out' | 'rate limited'\n\nexport enum REALTIME_POSTGRES_CHANGES_LISTEN_EVENT {\n  ALL = '*',\n  INSERT = 'INSERT',\n  UPDATE = 'UPDATE',\n  DELETE = 'DELETE',\n}\n\nexport enum REALTIME_LISTEN_TYPES {\n  BROADCAST = 'broadcast',\n  PRESENCE = 'presence',\n  /**\n   * listen to Postgres changes.\n   */\n  POSTGRES_CHANGES = 'postgres_changes',\n}\n\nexport enum REALTIME_SUBSCRIBE_STATES {\n  SUBSCRIBED = 'SUBSCRIBED',\n  TIMED_OUT = 'TIMED_OUT',\n  CLOSED = 'CLOSED',\n  CHANNEL_ERROR = 'CHANNEL_ERROR',\n}\n\n/** A channel is the basic building block of Realtime\n * and narrows the scope of data flow to subscribed clients.\n * You can think of a channel as a chatroom where participants are able to see who's online\n * and send and receive messages.\n **/\nexport default class RealtimeChannel {\n  bindings: {\n    [key: string]: {\n      type: string\n      filter: { [key: string]: any }\n      callback: Function\n      id?: string\n    }[]\n  } = {}\n  timeout: number\n  state = CHANNEL_STATES.closed\n  joinedOnce = false\n  joinPush: Push\n  rejoinTimer: Timer\n  pushBuffer: Push[] = []\n  presence: RealtimePresence\n\n  constructor(\n    /** Topic name can be any string. */\n    public topic: string,\n    public params: RealtimeChannelOptions = { config: {} },\n    public socket: RealtimeClient\n  ) {\n    this.params.config = {\n      ...{\n        broadcast: { ack: false, self: false },\n        presence: { key: '' },\n      },\n      ...params.config,\n    }\n    this.timeout = this.socket.timeout\n    this.joinPush = new Push(\n      this,\n      CHANNEL_EVENTS.join,\n      this.params,\n      this.timeout\n    )\n    this.rejoinTimer = new Timer(\n      () => this._rejoinUntilConnected(),\n      this.socket.reconnectAfterMs\n    )\n    this.joinPush.receive('ok', () => {\n      this.state = CHANNEL_STATES.joined\n      this.rejoinTimer.reset()\n      this.pushBuffer.forEach((pushEvent: Push) => pushEvent.send())\n      this.pushBuffer = []\n    })\n    this._onClose(() => {\n      this.rejoinTimer.reset()\n      this.socket.log('channel', `close ${this.topic} ${this._joinRef()}`)\n      this.state = CHANNEL_STATES.closed\n      this.socket._remove(this)\n    })\n    this._onError((reason: string) => {\n      if (this._isLeaving() || this._isClosed()) {\n        return\n      }\n      this.socket.log('channel', `error ${this.topic}`, reason)\n      this.state = CHANNEL_STATES.errored\n      this.rejoinTimer.scheduleTimeout()\n    })\n    this.joinPush.receive('timeout', () => {\n      if (!this._isJoining()) {\n        return\n      }\n      this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout)\n      this.state = CHANNEL_STATES.errored\n      this.rejoinTimer.scheduleTimeout()\n    })\n    this._on(CHANNEL_EVENTS.reply, {}, (payload: any, ref: string) => {\n      this._trigger(this._replyEventName(ref), payload)\n    })\n\n    this.presence = new RealtimePresence(this)\n  }\n\n  /** Subscribe registers your client with the server */\n  subscribe(\n    callback?: (status: `${REALTIME_SUBSCRIBE_STATES}`, err?: Error) => void,\n    timeout = this.timeout\n  ): RealtimeChannel {\n    if (this.joinedOnce) {\n      throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`\n    } else {\n      const {\n        config: { broadcast, presence },\n      } = this.params\n      this._onError((e: Error) => callback && callback('CHANNEL_ERROR', e))\n      this._onClose(() => callback && callback('CLOSED'))\n\n      const accessTokenPayload: { access_token?: string } = {}\n      const config = {\n        broadcast,\n        presence,\n        postgres_changes:\n          this.bindings.postgres_changes?.map((r) => r.filter) ?? [],\n      }\n\n      if (this.socket.accessToken) {\n        accessTokenPayload.access_token = this.socket.accessToken\n      }\n\n      this.updateJoinPayload({ ...{ config }, ...accessTokenPayload })\n\n      this.joinedOnce = true\n      this._rejoin(timeout)\n\n      this.joinPush\n        .receive(\n          'ok',\n          ({\n            postgres_changes: serverPostgresFilters,\n          }: {\n            postgres_changes: {\n              id: string\n              event: string\n              schema?: string\n              table?: string\n              filter?: string\n            }[]\n          }) => {\n            this.socket.accessToken &&\n              this.socket.setAuth(this.socket.accessToken)\n\n            if (serverPostgresFilters === undefined) {\n              callback && callback('SUBSCRIBED')\n              return\n            } else {\n              const clientPostgresBindings = this.bindings.postgres_changes\n              const bindingsLen = clientPostgresBindings?.length ?? 0\n              const newPostgresBindings = []\n\n              for (let i = 0; i < bindingsLen; i++) {\n                const clientPostgresBinding = clientPostgresBindings[i]\n                const {\n                  filter: { event, schema, table, filter },\n                } = clientPostgresBinding\n                const serverPostgresFilter =\n                  serverPostgresFilters && serverPostgresFilters[i]\n\n                if (\n                  serverPostgresFilter &&\n                  serverPostgresFilter.event === event &&\n                  serverPostgresFilter.schema === schema &&\n                  serverPostgresFilter.table === table &&\n                  serverPostgresFilter.filter === filter\n                ) {\n                  newPostgresBindings.push({\n                    ...clientPostgresBinding,\n                    id: serverPostgresFilter.id,\n                  })\n                } else {\n                  this.unsubscribe()\n                  callback &&\n                    callback(\n                      'CHANNEL_ERROR',\n                      new Error(\n                        'mismatch between server and client bindings for postgres changes'\n                      )\n                    )\n                  return\n                }\n              }\n\n              this.bindings.postgres_changes = newPostgresBindings\n\n              callback && callback('SUBSCRIBED')\n              return\n            }\n          }\n        )\n        .receive('error', (error: { [key: string]: any }) => {\n          callback &&\n            callback(\n              'CHANNEL_ERROR',\n              new Error(\n                JSON.stringify(Object.values(error).join(', ') || 'error')\n              )\n            )\n          return\n        })\n        .receive('timeout', () => {\n          callback && callback('TIMED_OUT')\n          return\n        })\n    }\n\n    return this\n  }\n\n  presenceState<\n    T extends { [key: string]: any } = {}\n  >(): RealtimePresenceState<T> {\n    return this.presence.state as RealtimePresenceState<T>\n  }\n\n  async track(\n    payload: { [key: string]: any },\n    opts: { [key: string]: any } = {}\n  ): Promise<RealtimeChannelSendResponse> {\n    return await this.send(\n      {\n        type: 'presence',\n        event: 'track',\n        payload,\n      },\n      opts.timeout || this.timeout\n    )\n  }\n\n  async untrack(\n    opts: { [key: string]: any } = {}\n  ): Promise<RealtimeChannelSendResponse> {\n    return await this.send(\n      {\n        type: 'presence',\n        event: 'untrack',\n      },\n      opts\n    )\n  }\n\n  /**\n   * Creates an event handler that listens to changes.\n   */\n  on(\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.SYNC}` },\n    callback: () => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.JOIN}` },\n    callback: (payload: RealtimePresenceJoinPayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.LEAVE}` },\n    callback: (payload: RealtimePresenceLeavePayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.ALL}`>,\n    callback: (payload: RealtimePostgresChangesPayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.INSERT}`>,\n    callback: (payload: RealtimePostgresInsertPayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.UPDATE}`>,\n    callback: (payload: RealtimePostgresUpdatePayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.DELETE}`>,\n    callback: (payload: RealtimePostgresDeletePayload<T>) => void\n  ): RealtimeChannel\n  /**\n   * The following is placed here to display on supabase.com/docs/reference/javascript/subscribe.\n   * @param type One of \"broadcast\", \"presence\", or \"postgres_changes\".\n   * @param filter Custom object specific to the Realtime feature detailing which payloads to receive.\n   * @param callback Function to be invoked when event handler is triggered.\n   */\n  on(\n    type: `${REALTIME_LISTEN_TYPES.BROADCAST}`,\n    filter: { event: string },\n    callback: (payload: {\n      type: `${REALTIME_LISTEN_TYPES.BROADCAST}`\n      event: string\n      [key: string]: any\n    }) => void\n  ): RealtimeChannel\n  on(\n    type: `${REALTIME_LISTEN_TYPES}`,\n    filter: { event: string; [key: string]: string },\n    callback: (payload: any) => void\n  ): RealtimeChannel {\n    return this._on(type, filter, callback)\n  }\n\n  send(\n    payload: { type: string; [key: string]: any },\n    opts: { [key: string]: any } = {}\n  ): Promise<RealtimeChannelSendResponse> {\n    return new Promise((resolve) => {\n      const push = this._push(\n        payload.type,\n        payload,\n        opts.timeout || this.timeout\n      )\n\n      if (push.rateLimited) {\n        resolve('rate limited')\n      }\n\n      if (\n        payload.type === 'broadcast' &&\n        !this.params?.config?.broadcast?.ack\n      ) {\n        resolve('ok')\n      }\n\n      push.receive('ok', () => resolve('ok'))\n      push.receive('timeout', () => resolve('timed out'))\n    })\n  }\n\n  updateJoinPayload(payload: { [key: string]: any }): void {\n    this.joinPush.updatePayload(payload)\n  }\n\n  /**\n   * Leaves the channel.\n   *\n   * Unsubscribes from server events, and instructs channel to terminate on server.\n   * Triggers onClose() hooks.\n   *\n   * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n   * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n   */\n  unsubscribe(timeout = this.timeout): Promise<'ok' | 'timed out' | 'error'> {\n    this.state = CHANNEL_STATES.leaving\n    const onClose = () => {\n      this.socket.log('channel', `leave ${this.topic}`)\n      this._trigger(CHANNEL_EVENTS.close, 'leave', this._joinRef())\n    }\n\n    this.rejoinTimer.reset()\n    // Destroy joinPush to avoid connection timeouts during unscription phase\n    this.joinPush.destroy()\n\n    return new Promise((resolve) => {\n      const leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout)\n\n      leavePush\n        .receive('ok', () => {\n          onClose()\n          resolve('ok')\n        })\n        .receive('timeout', () => {\n          onClose()\n          resolve('timed out')\n        })\n        .receive('error', () => {\n          resolve('error')\n        })\n\n      leavePush.send()\n\n      if (!this._canPush()) {\n        leavePush.trigger('ok', {})\n      }\n    })\n  }\n\n  /** @internal */\n  _push(\n    event: string,\n    payload: { [key: string]: any },\n    timeout = this.timeout\n  ) {\n    if (!this.joinedOnce) {\n      throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`\n    }\n    let pushEvent = new Push(this, event, payload, timeout)\n    if (this._canPush()) {\n      pushEvent.send()\n    } else {\n      pushEvent.startTimeout()\n      this.pushBuffer.push(pushEvent)\n    }\n\n    return pushEvent\n  }\n\n  /**\n   * Overridable message hook\n   *\n   * Receives all events for specialized message handling before dispatching to the channel callbacks.\n   * Must return the payload, modified or unmodified.\n   *\n   * @internal\n   */\n  _onMessage(_event: string, payload: any, _ref?: string) {\n    return payload\n  }\n\n  /** @internal */\n  _isMember(topic: string): boolean {\n    return this.topic === topic\n  }\n\n  /** @internal */\n  _joinRef(): string {\n    return this.joinPush.ref\n  }\n\n  /** @internal */\n  _trigger(type: string, payload?: any, ref?: string) {\n    const typeLower = type.toLocaleLowerCase()\n    const { close, error, leave, join } = CHANNEL_EVENTS\n    const events: string[] = [close, error, leave, join]\n    if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {\n      return\n    }\n    let handledPayload = this._onMessage(typeLower, payload, ref)\n    if (payload && !handledPayload) {\n      throw 'channel onMessage callbacks must return the payload, modified or unmodified'\n    }\n\n    if (['insert', 'update', 'delete'].includes(typeLower)) {\n      this.bindings.postgres_changes\n        ?.filter((bind) => {\n          return (\n            bind.filter?.event === '*' ||\n            bind.filter?.event?.toLocaleLowerCase() === typeLower\n          )\n        })\n        .map((bind) => bind.callback(handledPayload, ref))\n    } else {\n      this.bindings[typeLower]\n        ?.filter((bind) => {\n          if (\n            ['broadcast', 'presence', 'postgres_changes'].includes(typeLower)\n          ) {\n            if ('id' in bind) {\n              const bindId = bind.id\n              const bindEvent = bind.filter?.event\n              return (\n                bindId &&\n                payload.ids?.includes(bindId) &&\n                (bindEvent === '*' ||\n                  bindEvent?.toLocaleLowerCase() ===\n                    payload.data?.type.toLocaleLowerCase())\n              )\n            } else {\n              const bindEvent = bind?.filter?.event?.toLocaleLowerCase()\n              return (\n                bindEvent === '*' ||\n                bindEvent === payload?.event?.toLocaleLowerCase()\n              )\n            }\n          } else {\n            return bind.type.toLocaleLowerCase() === typeLower\n          }\n        })\n        .map((bind) => {\n          if (typeof handledPayload === 'object' && 'ids' in handledPayload) {\n            const postgresChanges = handledPayload.data\n            const { schema, table, commit_timestamp, type, errors } =\n              postgresChanges\n            const enrichedPayload = {\n              schema: schema,\n              table: table,\n              commit_timestamp: commit_timestamp,\n              eventType: type,\n              new: {},\n              old: {},\n              errors: errors,\n            }\n            handledPayload = {\n              ...enrichedPayload,\n              ...this._getPayloadRecords(postgresChanges),\n            }\n          }\n          bind.callback(handledPayload, ref)\n        })\n    }\n  }\n\n  /** @internal */\n  _isClosed(): boolean {\n    return this.state === CHANNEL_STATES.closed\n  }\n\n  /** @internal */\n  _isJoined(): boolean {\n    return this.state === CHANNEL_STATES.joined\n  }\n\n  /** @internal */\n  _isJoining(): boolean {\n    return this.state === CHANNEL_STATES.joining\n  }\n\n  /** @internal */\n  _isLeaving(): boolean {\n    return this.state === CHANNEL_STATES.leaving\n  }\n\n  /** @internal */\n  _replyEventName(ref: string): string {\n    return `chan_reply_${ref}`\n  }\n\n  /** @internal */\n  _on(type: string, filter: { [key: string]: any }, callback: Function) {\n    const typeLower = type.toLocaleLowerCase()\n\n    const binding = {\n      type: typeLower,\n      filter: filter,\n      callback: callback,\n    }\n\n    if (this.bindings[typeLower]) {\n      this.bindings[typeLower].push(binding)\n    } else {\n      this.bindings[typeLower] = [binding]\n    }\n\n    return this\n  }\n\n  /** @internal */\n  _off(type: string, filter: { [key: string]: any }) {\n    const typeLower = type.toLocaleLowerCase()\n\n    this.bindings[typeLower] = this.bindings[typeLower].filter((bind) => {\n      return !(\n        bind.type?.toLocaleLowerCase() === typeLower &&\n        RealtimeChannel.isEqual(bind.filter, filter)\n      )\n    })\n    return this\n  }\n\n  /** @internal */\n  private static isEqual(\n    obj1: { [key: string]: string },\n    obj2: { [key: string]: string }\n  ) {\n    if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n      return false\n    }\n\n    for (const k in obj1) {\n      if (obj1[k] !== obj2[k]) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /** @internal */\n  private _rejoinUntilConnected() {\n    this.rejoinTimer.scheduleTimeout()\n    if (this.socket.isConnected()) {\n      this._rejoin()\n    }\n  }\n\n  /**\n   * Registers a callback that will be executed when the channel closes.\n   *\n   * @internal\n   */\n  private _onClose(callback: Function) {\n    this._on(CHANNEL_EVENTS.close, {}, callback)\n  }\n\n  /**\n   * Registers a callback that will be executed when the channel encounteres an error.\n   *\n   * @internal\n   */\n  private _onError(callback: Function) {\n    this._on(CHANNEL_EVENTS.error, {}, (reason: string) => callback(reason))\n  }\n\n  /**\n   * Returns `true` if the socket is connected and the channel has been joined.\n   *\n   * @internal\n   */\n  private _canPush(): boolean {\n    return this.socket.isConnected() && this._isJoined()\n  }\n\n  /** @internal */\n  private _rejoin(timeout = this.timeout): void {\n    if (this._isLeaving()) {\n      return\n    }\n    this.socket._leaveOpenTopic(this.topic)\n    this.state = CHANNEL_STATES.joining\n    this.joinPush.resend(timeout)\n  }\n\n  /** @internal */\n  private _getPayloadRecords(payload: any) {\n    const records = {\n      new: {},\n      old: {},\n    }\n\n    if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n      records.new = Transformers.convertChangeData(\n        payload.columns,\n        payload.record\n      )\n    }\n\n    if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n      records.old = Transformers.convertChangeData(\n        payload.columns,\n        payload.old_record\n      )\n    }\n\n    return records\n  }\n}\n","import { w3cwebsocket } from 'websocket'\nimport {\n  VSN,\n  CHANNEL_EVENTS,\n  TRANSPORTS,\n  SOCKET_STATES,\n  DEFAULT_TIMEOUT,\n  WS_CLOSE_NORMAL,\n  DEFAULT_HEADERS,\n  CONNECTION_STATE,\n} from './lib/constants'\nimport Timer from './lib/timer'\nimport Serializer from './lib/serializer'\nimport RealtimeChannel from './RealtimeChannel'\nimport type { RealtimeChannelOptions } from './RealtimeChannel'\n\nexport type RealtimeClientOptions = {\n  transport?: WebSocket\n  timeout?: number\n  heartbeatIntervalMs?: number\n  logger?: Function\n  encode?: Function\n  decode?: Function\n  reconnectAfterMs?: Function\n  headers?: { [key: string]: string }\n  params?: { [key: string]: any }\n}\n\nexport type RealtimeMessage = {\n  topic: string\n  event: string\n  payload: any\n  ref: string\n  join_ref?: string\n}\n\nexport type RealtimeRemoveChannelResponse = 'ok' | 'timed out' | 'error'\n\nconst noop = () => {}\n\nexport default class RealtimeClient {\n  accessToken: string | null = null\n  channels: RealtimeChannel[] = []\n  endPoint: string = ''\n  headers?: { [key: string]: string } = DEFAULT_HEADERS\n  params?: { [key: string]: string } = {}\n  timeout: number = DEFAULT_TIMEOUT\n  transport: any = w3cwebsocket\n  heartbeatIntervalMs: number = 30000\n  heartbeatTimer: ReturnType<typeof setInterval> | undefined = undefined\n  pendingHeartbeatRef: string | null = null\n  ref: number = 0\n  reconnectTimer: Timer\n  logger: Function = noop\n  encode: Function\n  decode: Function\n  reconnectAfterMs: Function\n  conn: WebSocket | null = null\n  sendBuffer: Function[] = []\n  serializer: Serializer = new Serializer()\n  stateChangeCallbacks: {\n    open: Function[]\n    close: Function[]\n    error: Function[]\n    message: Function[]\n  } = {\n    open: [],\n    close: [],\n    error: [],\n    message: [],\n  }\n  eventsPerSecondLimitMs: number = 100\n  inThrottle: boolean = false\n\n  /**\n   * Initializes the Socket.\n   *\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n   * @param options.transport The Websocket Transport, for example WebSocket.\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n   * @param options.params The optional params to pass when connecting.\n   * @param options.headers The optional headers to pass when connecting.\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n   */\n  constructor(endPoint: string, options?: RealtimeClientOptions) {\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`\n\n    if (options?.params) this.params = options.params\n    if (options?.headers) this.headers = { ...this.headers, ...options.headers }\n    if (options?.timeout) this.timeout = options.timeout\n    if (options?.logger) this.logger = options.logger\n    if (options?.transport) this.transport = options.transport\n    if (options?.heartbeatIntervalMs)\n      this.heartbeatIntervalMs = options.heartbeatIntervalMs\n\n    const eventsPerSecond = options?.params?.eventsPerSecond\n    if (eventsPerSecond)\n      this.eventsPerSecondLimitMs = Math.floor(1000 / eventsPerSecond)\n\n    this.reconnectAfterMs = options?.reconnectAfterMs\n      ? options.reconnectAfterMs\n      : (tries: number) => {\n          return [1000, 2000, 5000, 10000][tries - 1] || 10000\n        }\n    this.encode = options?.encode\n      ? options.encode\n      : (payload: JSON, callback: Function) => {\n          return callback(JSON.stringify(payload))\n        }\n    this.decode = options?.decode\n      ? options.decode\n      : this.serializer.decode.bind(this.serializer)\n    this.reconnectTimer = new Timer(async () => {\n      this.disconnect()\n      this.connect()\n    }, this.reconnectAfterMs)\n  }\n\n  /**\n   * Connects the socket, unless already connected.\n   */\n  connect(): void {\n    if (this.conn) {\n      return\n    }\n\n    this.conn = new this.transport(this._endPointURL(), [], null, this.headers)\n\n    if (this.conn) {\n      this.conn.binaryType = 'arraybuffer'\n      this.conn.onopen = () => this._onConnOpen()\n      this.conn.onerror = (error) => this._onConnError(error as ErrorEvent)\n      this.conn.onmessage = (event) => this._onConnMessage(event)\n      this.conn.onclose = (event) => this._onConnClose(event)\n    }\n  }\n\n  /**\n   * Disconnects the socket.\n   *\n   * @param code A numeric status code to send on disconnect.\n   * @param reason A custom reason for the disconnect.\n   */\n  disconnect(code?: number, reason?: string): void {\n    if (this.conn) {\n      this.conn.onclose = function () {} // noop\n      if (code) {\n        this.conn.close(code, reason ?? '')\n      } else {\n        this.conn.close()\n      }\n      this.conn = null\n      // remove open handles\n      this.heartbeatTimer && clearInterval(this.heartbeatTimer)\n      this.reconnectTimer.reset()\n    }\n  }\n\n  /**\n   * Returns all created channels\n   */\n  getChannels(): RealtimeChannel[] {\n    return this.channels\n  }\n\n  /**\n   * Unsubscribes and removes a single channel\n   * @param channel A RealtimeChannel instance\n   */\n  async removeChannel(\n    channel: RealtimeChannel\n  ): Promise<RealtimeRemoveChannelResponse> {\n    const status = await channel.unsubscribe()\n    if (this.channels.length === 0) {\n      this.disconnect()\n    }\n    return status\n  }\n\n  /**\n   * Unsubscribes and removes all channels\n   */\n  async removeAllChannels(): Promise<RealtimeRemoveChannelResponse[]> {\n    const values_1 = await Promise.all(\n      this.channels.map((channel) => channel.unsubscribe())\n    )\n    this.disconnect()\n    return values_1\n  }\n\n  /**\n   * Logs the message.\n   *\n   * For customized logging, `this.logger` can be overridden.\n   */\n  log(kind: string, msg: string, data?: any) {\n    this.logger(kind, msg, data)\n  }\n\n  /**\n   * Returns the current state of the socket.\n   */\n  connectionState(): CONNECTION_STATE {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return CONNECTION_STATE.Connecting\n      case SOCKET_STATES.open:\n        return CONNECTION_STATE.Open\n      case SOCKET_STATES.closing:\n        return CONNECTION_STATE.Closing\n      default:\n        return CONNECTION_STATE.Closed\n    }\n  }\n\n  /**\n   * Returns `true` is the connection is open.\n   */\n  isConnected(): boolean {\n    return this.connectionState() === CONNECTION_STATE.Open\n  }\n\n  channel(\n    topic: string,\n    params: RealtimeChannelOptions = { config: {} }\n  ): RealtimeChannel {\n    if (!this.isConnected()) {\n      this.connect()\n    }\n\n    const chan = new RealtimeChannel(`realtime:${topic}`, params, this)\n    this.channels.push(chan)\n    return chan\n  }\n\n  /**\n   * Push out a message if the socket is connected.\n   *\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n   */\n  push(data: RealtimeMessage): 'rate limited' | void {\n    const { topic, event, payload, ref } = data\n    let callback = () => {\n      this.encode(data, (result: any) => {\n        this.conn?.send(result)\n      })\n    }\n    this.log('push', `${topic} ${event} (${ref})`, payload)\n    if (this.isConnected()) {\n      if (['broadcast', 'presence', 'postgres_changes'].includes(event)) {\n        const isThrottled = this._throttle(callback)()\n        if (isThrottled) {\n          return 'rate limited'\n        }\n      } else {\n        callback()\n      }\n    } else {\n      this.sendBuffer.push(callback)\n    }\n  }\n\n  /**\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n   *\n   * @param token A JWT string.\n   */\n  setAuth(token: string | null): void {\n    this.accessToken = token\n\n    this.channels.forEach((channel) => {\n      token && channel.updateJoinPayload({ access_token: token })\n\n      if (channel.joinedOnce && channel._isJoined()) {\n        channel._push(CHANNEL_EVENTS.access_token, { access_token: token })\n      }\n    })\n  }\n\n  /**\n   * Return the next message ref, accounting for overflows\n   *\n   * @internal\n   */\n  _makeRef(): string {\n    let newRef = this.ref + 1\n    if (newRef === this.ref) {\n      this.ref = 0\n    } else {\n      this.ref = newRef\n    }\n\n    return this.ref.toString()\n  }\n\n  /**\n   * Unsubscribe from channels with the specified topic.\n   *\n   * @internal\n   */\n  _leaveOpenTopic(topic: string): void {\n    let dupChannel = this.channels.find(\n      (c) => c.topic === topic && (c._isJoined() || c._isJoining())\n    )\n    if (dupChannel) {\n      this.log('transport', `leaving duplicate topic \"${topic}\"`)\n      dupChannel.unsubscribe()\n    }\n  }\n\n  /**\n   * Removes a subscription from the socket.\n   *\n   * @param channel An open subscription.\n   *\n   * @internal\n   */\n  _remove(channel: RealtimeChannel) {\n    this.channels = this.channels.filter(\n      (c: RealtimeChannel) => c._joinRef() !== channel._joinRef()\n    )\n  }\n\n  /**\n   * Returns the URL of the websocket.\n   *\n   * @internal\n   */\n  private _endPointURL(): string {\n    return this._appendParams(\n      this.endPoint,\n      Object.assign({}, this.params, { vsn: VSN })\n    )\n  }\n\n  /** @internal */\n  private _onConnMessage(rawMessage: { data: any }) {\n    this.decode(rawMessage.data, (msg: RealtimeMessage) => {\n      let { topic, event, payload, ref } = msg\n\n      if (\n        (ref && ref === this.pendingHeartbeatRef) ||\n        event === payload?.type\n      ) {\n        this.pendingHeartbeatRef = null\n      }\n\n      this.log(\n        'receive',\n        `${payload.status || ''} ${topic} ${event} ${\n          (ref && '(' + ref + ')') || ''\n        }`,\n        payload\n      )\n      this.channels\n        .filter((channel: RealtimeChannel) => channel._isMember(topic))\n        .forEach((channel: RealtimeChannel) =>\n          channel._trigger(event, payload, ref)\n        )\n      this.stateChangeCallbacks.message.forEach((callback) => callback(msg))\n    })\n  }\n\n  /** @internal */\n  private _onConnOpen() {\n    this.log('transport', `connected to ${this._endPointURL()}`)\n    this._flushSendBuffer()\n    this.reconnectTimer.reset()\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer)\n    this.heartbeatTimer = setInterval(\n      () => this._sendHeartbeat(),\n      this.heartbeatIntervalMs\n    )\n    this.stateChangeCallbacks.open.forEach((callback) => callback())!\n  }\n\n  /** @internal */\n  private _onConnClose(event: any) {\n    this.log('transport', 'close', event)\n    this._triggerChanError()\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer)\n    this.reconnectTimer.scheduleTimeout()\n    this.stateChangeCallbacks.close.forEach((callback) => callback(event))\n  }\n\n  /** @internal */\n  private _onConnError(error: ErrorEvent) {\n    this.log('transport', error.message)\n    this._triggerChanError()\n    this.stateChangeCallbacks.error.forEach((callback) => callback(error))\n  }\n\n  /** @internal */\n  private _triggerChanError() {\n    this.channels.forEach((channel: RealtimeChannel) =>\n      channel._trigger(CHANNEL_EVENTS.error)\n    )\n  }\n\n  /** @internal */\n  private _appendParams(\n    url: string,\n    params: { [key: string]: string }\n  ): string {\n    if (Object.keys(params).length === 0) {\n      return url\n    }\n    const prefix = url.match(/\\?/) ? '&' : '?'\n    const query = new URLSearchParams(params)\n\n    return `${url}${prefix}${query}`\n  }\n\n  /** @internal */\n  private _flushSendBuffer() {\n    if (this.isConnected() && this.sendBuffer.length > 0) {\n      this.sendBuffer.forEach((callback) => callback())\n      this.sendBuffer = []\n    }\n  }\n  /** @internal */\n  private _sendHeartbeat() {\n    if (!this.isConnected()) {\n      return\n    }\n    if (this.pendingHeartbeatRef) {\n      this.pendingHeartbeatRef = null\n      this.log(\n        'transport',\n        'heartbeat timeout. Attempting to re-establish connection'\n      )\n      this.conn?.close(WS_CLOSE_NORMAL, 'hearbeat timeout')\n      return\n    }\n    this.pendingHeartbeatRef = this._makeRef()\n    this.push({\n      topic: 'phoenix',\n      event: 'heartbeat',\n      payload: {},\n      ref: this.pendingHeartbeatRef,\n    })\n    this.setAuth(this.accessToken)\n  }\n\n  /** @internal */\n  private _throttle(\n    callback: Function,\n    eventsPerSecondLimitMs: number = this.eventsPerSecondLimitMs\n  ): () => boolean {\n    return () => {\n      if (this.inThrottle) return true\n\n      callback()\n\n      if (eventsPerSecondLimitMs > 0) {\n        this.inThrottle = true\n\n        setTimeout(() => {\n          this.inThrottle = false\n        }, eventsPerSecondLimitMs)\n      }\n\n      return false\n    }\n  }\n}\n","export class StorageError extends Error {\n  protected __isStorageError = true\n\n  constructor(message: string) {\n    super(message)\n    this.name = 'StorageError'\n  }\n}\n\nexport function isStorageError(error: unknown): error is StorageError {\n  return typeof error === 'object' && error !== null && '__isStorageError' in error\n}\n\nexport class StorageApiError extends StorageError {\n  status: number\n\n  constructor(message: string, status: number) {\n    super(message)\n    this.name = 'StorageApiError'\n    this.status = status\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      status: this.status,\n    }\n  }\n}\n\nexport class StorageUnknownError extends StorageError {\n  originalError: unknown\n\n  constructor(message: string, originalError: unknown) {\n    super(message)\n    this.name = 'StorageUnknownError'\n    this.originalError = originalError\n  }\n}\n","type Fetch = typeof fetch\n\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\n  let _fetch: Fetch\n  if (customFetch) {\n    _fetch = customFetch\n  } else if (typeof fetch === 'undefined') {\n    _fetch = async (...args) => await (await import('cross-fetch')).fetch(...args)\n  } else {\n    _fetch = fetch\n  }\n  return (...args) => _fetch(...args)\n}\n\nexport const resolveResponse = async () => {\n  if (typeof Response === 'undefined') {\n    return (await import('cross-fetch')).Response\n  }\n\n  return Response\n}\n","import { StorageApiError, StorageUnknownError } from './errors'\nimport { resolveResponse } from './helpers'\nimport { FetchParameters } from './types'\n\nexport type Fetch = typeof fetch\n\nexport interface FetchOptions {\n  headers?: {\n    [key: string]: string\n  }\n  noResolveJson?: boolean\n}\n\nexport type RequestMethodType = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\nconst _getErrorMessage = (err: any): string =>\n  err.msg || err.message || err.error_description || err.error || JSON.stringify(err)\n\nconst handleError = async (error: unknown, reject: (reason?: any) => void) => {\n  const Res = await resolveResponse()\n\n  if (error instanceof Res) {\n    error\n      .json()\n      .then((err) => {\n        reject(new StorageApiError(_getErrorMessage(err), error.status || 500))\n      })\n      .catch((err) => {\n        reject(new StorageUnknownError(_getErrorMessage(err), err))\n      })\n  } else {\n    reject(new StorageUnknownError(_getErrorMessage(error), error))\n  }\n}\n\nconst _getRequestParams = (\n  method: RequestMethodType,\n  options?: FetchOptions,\n  parameters?: FetchParameters,\n  body?: object\n) => {\n  const params: { [k: string]: any } = { method, headers: options?.headers || {} }\n\n  if (method === 'GET') {\n    return params\n  }\n\n  params.headers = { 'Content-Type': 'application/json', ...options?.headers }\n  params.body = JSON.stringify(body)\n  return { ...params, ...parameters }\n}\n\nasync function _handleRequest(\n  fetcher: Fetch,\n  method: RequestMethodType,\n  url: string,\n  options?: FetchOptions,\n  parameters?: FetchParameters,\n  body?: object\n): Promise<any> {\n  return new Promise((resolve, reject) => {\n    fetcher(url, _getRequestParams(method, options, parameters, body))\n      .then((result) => {\n        if (!result.ok) throw result\n        if (options?.noResolveJson) return result\n        return result.json()\n      })\n      .then((data) => resolve(data))\n      .catch((error) => handleError(error, reject))\n  })\n}\n\nexport async function get(\n  fetcher: Fetch,\n  url: string,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'GET', url, options, parameters)\n}\n\nexport async function post(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'POST', url, options, parameters, body)\n}\n\nexport async function put(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'PUT', url, options, parameters, body)\n}\n\nexport async function remove(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'DELETE', url, options, parameters, body)\n}\n","import { isStorageError, StorageError } from '../lib/errors'\nimport { Fetch, get, post, remove } from '../lib/fetch'\nimport { resolveFetch } from '../lib/helpers'\nimport {\n  FileObject,\n  FileOptions,\n  SearchOptions,\n  FetchParameters,\n  TransformOptions,\n} from '../lib/types'\n\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc',\n  },\n}\n\nconst DEFAULT_FILE_OPTIONS: FileOptions = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false,\n}\n\ntype FileBody =\n  | ArrayBuffer\n  | ArrayBufferView\n  | Blob\n  | Buffer\n  | File\n  | FormData\n  | NodeJS.ReadableStream\n  | ReadableStream<Uint8Array>\n  | URLSearchParams\n  | string\n\nexport default class StorageFileApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected bucketId?: string\n  protected fetch: Fetch\n\n  constructor(\n    url: string,\n    headers: { [key: string]: string } = {},\n    bucketId?: string,\n    fetch?: Fetch\n  ) {\n    this.url = url\n    this.headers = headers\n    this.bucketId = bucketId\n    this.fetch = resolveFetch(fetch)\n  }\n\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  private async uploadOrUpdate(\n    method: 'POST' | 'PUT',\n    path: string,\n    fileBody: FileBody,\n    fileOptions?: FileOptions\n  ): Promise<\n    | {\n        data: { path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      let body\n      const options = { ...DEFAULT_FILE_OPTIONS, ...fileOptions }\n      const headers: Record<string, string> = {\n        ...this.headers,\n        ...(method === 'POST' && { 'x-upsert': String(options.upsert as boolean) }),\n      }\n\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n        body = new FormData()\n        body.append('cacheControl', options.cacheControl as string)\n        body.append('', fileBody)\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n        body = fileBody\n        body.append('cacheControl', options.cacheControl as string)\n      } else {\n        body = fileBody\n        headers['cache-control'] = `max-age=${options.cacheControl}`\n        headers['content-type'] = options.contentType as string\n      }\n\n      const cleanPath = this._removeEmptyFolders(path)\n      const _path = this._getFinalPath(cleanPath)\n      const res = await this.fetch(`${this.url}/object/${_path}`, {\n        method,\n        body: body as BodyInit,\n        headers,\n        ...(options?.duplex ? { duplex: options.duplex } : {}),\n      })\n\n      if (res.ok) {\n        return {\n          data: { path: cleanPath },\n          error: null,\n        }\n      } else {\n        const error = await res.json()\n        return { data: null, error }\n      }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Uploads a file to an existing bucket.\n   *\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  async upload(\n    path: string,\n    fileBody: FileBody,\n    fileOptions?: FileOptions\n  ): Promise<\n    | {\n        data: { path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    return this.uploadOrUpdate('POST', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Upload a file with a token generated from `createSignedUploadUrl`.\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param token The token generated from `createSignedUploadUrl`\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  async uploadToSignedUrl(\n    path: string,\n    token: string,\n    fileBody: FileBody,\n    fileOptions?: FileOptions\n  ) {\n    const cleanPath = this._removeEmptyFolders(path)\n    const _path = this._getFinalPath(cleanPath)\n\n    const url = new URL(this.url + `/object/upload/sign/${_path}`)\n    url.searchParams.set('token', token)\n\n    try {\n      let body\n      const options = { upsert: DEFAULT_FILE_OPTIONS.upsert, ...fileOptions }\n      const headers: Record<string, string> = {\n        ...this.headers,\n        ...{ 'x-upsert': String(options.upsert as boolean) },\n      }\n\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n        body = new FormData()\n        body.append('cacheControl', options.cacheControl as string)\n        body.append('', fileBody)\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n        body = fileBody\n        body.append('cacheControl', options.cacheControl as string)\n      } else {\n        body = fileBody\n        headers['cache-control'] = `max-age=${options.cacheControl}`\n        headers['content-type'] = options.contentType as string\n      }\n\n      const res = await this.fetch(url.toString(), {\n        method: 'PUT',\n        body: body as BodyInit,\n        headers,\n      })\n\n      if (res.ok) {\n        return {\n          data: { path: cleanPath },\n          error: null,\n        }\n      } else {\n        const error = await res.json()\n        return { data: null, error }\n      }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates a signed upload URL.\n   * Signed upload URLs can be used to upload files to the bucket without further authentication.\n   * They are valid for one minute.\n   * @param path The file path, including the current file name. For example `folder/image.png`.\n   */\n  async createSignedUploadUrl(\n    path: string\n  ): Promise<\n    | {\n        data: { signedUrl: string; token: string; path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      let _path = this._getFinalPath(path)\n\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/upload/sign/${_path}`,\n        {},\n        { headers: this.headers }\n      )\n\n      const url = new URL(this.url + data.url)\n\n      const token = url.searchParams.get('token')\n\n      if (!token) {\n        throw new StorageError('No token returned by API')\n      }\n\n      return { data: { signedUrl: url.toString(), path, token }, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Replaces an existing file at the specified path with a new one.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  async update(\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<\n    | {\n        data: { path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    return this.uploadOrUpdate('PUT', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Moves an existing file to a new path in the same bucket.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n   */\n  async move(\n    fromPath: string,\n    toPath: string\n  ): Promise<\n    | {\n        data: { message: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/move`,\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Copies an existing file to a new path in the same bucket.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n   */\n  async copy(\n    fromPath: string,\n    toPath: string\n  ): Promise<\n    | {\n        data: { path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/copy`,\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\n        { headers: this.headers }\n      )\n      return { data: { path: data.Key }, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n   *\n   * @param path The file path, including the current file name. For example `folder/image.png`.\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  async createSignedUrl(\n    path: string,\n    expiresIn: number,\n    options?: { download?: string | boolean; transform?: TransformOptions }\n  ): Promise<\n    | {\n        data: { signedUrl: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      let _path = this._getFinalPath(path)\n\n      let data = await post(\n        this.fetch,\n        `${this.url}/object/sign/${_path}`,\n        { expiresIn, ...(options?.transform ? { transform: options.transform } : {}) },\n        { headers: this.headers }\n      )\n      const downloadQueryParam = options?.download\n        ? `&download=${options.download === true ? '' : options.download}`\n        : ''\n      const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`)\n      data = { signedUrl }\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n   *\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   */\n  async createSignedUrls(\n    paths: string[],\n    expiresIn: number,\n    options?: { download: string | boolean }\n  ): Promise<\n    | {\n        data: { error: string | null; path: string | null; signedUrl: string }[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/sign/${this.bucketId}`,\n        { expiresIn, paths },\n        { headers: this.headers }\n      )\n\n      const downloadQueryParam = options?.download\n        ? `&download=${options.download === true ? '' : options.download}`\n        : ''\n      return {\n        data: data.map((datum: { signedURL: string }) => ({\n          ...datum,\n          signedUrl: datum.signedURL\n            ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`)\n            : null,\n        })),\n        error: null,\n      }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n   *\n   * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  async download(\n    path: string,\n    options?: { transform?: TransformOptions }\n  ): Promise<\n    | {\n        data: Blob\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    const wantsTransformation = typeof options?.transform !== 'undefined'\n    const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object'\n    const transformationQuery = this.transformOptsToQueryString(options?.transform || {})\n    const queryString = transformationQuery ? `?${transformationQuery}` : ''\n\n    try {\n      const _path = this._getFinalPath(path)\n      const res = await get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n        headers: this.headers,\n        noResolveJson: true,\n      })\n      const data = await res.blob()\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n   * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n   *\n   * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n   * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  getPublicUrl(\n    path: string,\n    options?: { download?: string | boolean; transform?: TransformOptions }\n  ): { data: { publicUrl: string } } {\n    const _path = this._getFinalPath(path)\n    const _queryString = []\n\n    const downloadQueryParam = options?.download\n      ? `download=${options.download === true ? '' : options.download}`\n      : ''\n\n    if (downloadQueryParam !== '') {\n      _queryString.push(downloadQueryParam)\n    }\n\n    const wantsTransformation = typeof options?.transform !== 'undefined'\n    const renderPath = wantsTransformation ? 'render/image' : 'object'\n    const transformationQuery = this.transformOptsToQueryString(options?.transform || {})\n\n    if (transformationQuery !== '') {\n      _queryString.push(transformationQuery)\n    }\n\n    let queryString = _queryString.join('&')\n    if (queryString !== '') {\n      queryString = `?${queryString}`\n    }\n\n    return {\n      data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) },\n    }\n  }\n\n  /**\n   * Deletes files within the same bucket\n   *\n   * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n   */\n  async remove(\n    paths: string[]\n  ): Promise<\n    | {\n        data: FileObject[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await remove(\n        this.fetch,\n        `${this.url}/object/${this.bucketId}`,\n        { prefixes: paths },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Get file metadata\n   * @param id the file id to retrieve metadata\n   */\n  // async getMetadata(\n  //   id: string\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n\n  //     throw error\n  //   }\n  // }\n\n  /**\n   * Update file metadata\n   * @param id the file id to update metadata\n   * @param meta the new file metadata\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await post(\n  //       this.fetch,\n  //       `${this.url}/metadata/${id}`,\n  //       { ...meta },\n  //       { headers: this.headers }\n  //     )\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n\n  //     throw error\n  //   }\n  // }\n\n  /**\n   * Lists all the files within a bucket.\n   * @param path The folder path.\n   */\n  async list(\n    path?: string,\n    options?: SearchOptions,\n    parameters?: FetchParameters\n  ): Promise<\n    | {\n        data: FileObject[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const body = { ...DEFAULT_SEARCH_OPTIONS, ...options, prefix: path || '' }\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/list/${this.bucketId}`,\n        body,\n        { headers: this.headers },\n        parameters\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  private _getFinalPath(path: string) {\n    return `${this.bucketId}/${path}`\n  }\n\n  private _removeEmptyFolders(path: string) {\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/')\n  }\n\n  private transformOptsToQueryString(transform: TransformOptions) {\n    const params = []\n    if (transform.width) {\n      params.push(`width=${transform.width}`)\n    }\n\n    if (transform.height) {\n      params.push(`height=${transform.height}`)\n    }\n\n    if (transform.resize) {\n      params.push(`resize=${transform.resize}`)\n    }\n\n    if (transform.format) {\n      params.push(`format=${transform.format}`)\n    }\n\n    if (transform.quality) {\n      params.push(`quality=${transform.quality}`)\n    }\n\n    return params.join('&')\n  }\n}\n","import { DEFAULT_HEADERS } from '../lib/constants'\nimport { isStorageError, StorageError } from '../lib/errors'\nimport { Fetch, get, post, put, remove } from '../lib/fetch'\nimport { resolveFetch } from '../lib/helpers'\nimport { Bucket } from '../lib/types'\n\nexport default class StorageBucketApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected fetch: Fetch\n\n  constructor(url: string, headers: { [key: string]: string } = {}, fetch?: Fetch) {\n    this.url = url\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\n    this.fetch = resolveFetch(fetch)\n  }\n\n  /**\n   * Retrieves the details of all Storage buckets within an existing project.\n   */\n  async listBuckets(): Promise<\n    | {\n        data: Bucket[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await get(this.fetch, `${this.url}/bucket`, { headers: this.headers })\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Retrieves the details of an existing Storage bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to retrieve.\n   */\n  async getBucket(\n    id: string\n  ): Promise<\n    | {\n        data: Bucket\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers })\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are creating.\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\n   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n   * The global file size limit takes precedence over this value.\n   * The default value is null, which doesn't set a per bucket file size limit.\n   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n   * The default value is null, which allows files with all mime types to be uploaded.\n   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n   * @returns newly created bucket id\n   */\n  async createBucket(\n    id: string,\n    options: {\n      public: boolean\n      fileSizeLimit?: number | string | null\n      allowedMimeTypes?: string[] | null\n    } = {\n      public: false,\n    }\n  ): Promise<\n    | {\n        data: Pick<Bucket, 'name'>\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/bucket`,\n        {\n          id,\n          name: id,\n          public: options.public,\n          file_size_limit: options.fileSizeLimit,\n          allowed_mime_types: options.allowedMimeTypes,\n        },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Updates a Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are updating.\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\n   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n   * The global file size limit takes precedence over this value.\n   * The default value is null, which doesn't set a per bucket file size limit.\n   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n   * The default value is null, which allows files with all mime types to be uploaded.\n   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n   */\n  async updateBucket(\n    id: string,\n    options: {\n      public: boolean\n      fileSizeLimit?: number | string | null\n      allowedMimeTypes?: string[] | null\n    }\n  ): Promise<\n    | {\n        data: { message: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await put(\n        this.fetch,\n        `${this.url}/bucket/${id}`,\n        {\n          id,\n          name: id,\n          public: options.public,\n          file_size_limit: options.fileSizeLimit,\n          allowed_mime_types: options.allowedMimeTypes,\n        },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Removes all objects inside a single bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to empty.\n   */\n  async emptyBucket(\n    id: string\n  ): Promise<\n    | {\n        data: { message: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/bucket/${id}/empty`,\n        {},\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n   * You must first `empty()` the bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to delete.\n   */\n  async deleteBucket(\n    id: string\n  ): Promise<\n    | {\n        data: { message: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await remove(\n        this.fetch,\n        `${this.url}/bucket/${id}`,\n        {},\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n}\n","import StorageFileApi from './packages/StorageFileApi'\nimport StorageBucketApi from './packages/StorageBucketApi'\nimport { Fetch } from './lib/fetch'\n\nexport class StorageClient extends StorageBucketApi {\n  constructor(url: string, headers: { [key: string]: string } = {}, fetch?: Fetch) {\n    super(url, headers, fetch)\n  }\n\n  /**\n   * Perform file operation in a bucket.\n   *\n   * @param id The bucket id to operate on.\n   */\n  from(id: string): StorageFileApi {\n    return new StorageFileApi(this.url, this.headers, id, this.fetch)\n  }\n}\n","import {\n  Fetch,\n  _generateLinkResponse,\n  _noResolveJsonResponse,\n  _request,\n  _userResponse,\n} from './lib/fetch'\nimport { resolveFetch } from './lib/helpers'\nimport {\n  AdminUserAttributes,\n  GenerateLinkParams,\n  GenerateLinkResponse,\n  Pagination,\n  User,\n  UserResponse,\n  GoTrueAdminMFAApi,\n  AuthMFAAdminDeleteFactorParams,\n  AuthMFAAdminDeleteFactorResponse,\n  AuthMFAAdminListFactorsParams,\n  AuthMFAAdminListFactorsResponse,\n  PageParams,\n} from './lib/types'\nimport { AuthError, isAuthError } from './lib/errors'\n\nexport default class GoTrueAdminApi {\n  /** Contains all MFA administration methods. */\n  mfa: GoTrueAdminMFAApi\n\n  protected url: string\n  protected headers: {\n    [key: string]: string\n  }\n  protected fetch: Fetch\n\n  constructor({\n    url = '',\n    headers = {},\n    fetch,\n  }: {\n    url: string\n    headers?: {\n      [key: string]: string\n    }\n    fetch?: Fetch\n  }) {\n    this.url = url\n    this.headers = headers\n    this.fetch = resolveFetch(fetch)\n    this.mfa = {\n      listFactors: this._listFactors.bind(this),\n      deleteFactor: this._deleteFactor.bind(this),\n    }\n  }\n\n  /**\n   * Removes a logged-in session.\n   * @param jwt A valid, logged-in JWT.\n   */\n  async signOut(jwt: string): Promise<{ data: null; error: AuthError | null }> {\n    try {\n      await _request(this.fetch, 'POST', `${this.url}/logout`, {\n        headers: this.headers,\n        jwt,\n        noResolveJson: true,\n      })\n      return { data: null, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Sends an invite link to an email address.\n   * @param email The email address of the user.\n   * @param options Additional options to be included when inviting.\n   */\n  async inviteUserByEmail(\n    email: string,\n    options: {\n      /** A custom data object to store additional metadata about the user. This maps to the `auth.users.user_metadata` column. */\n      data?: object\n\n      /** The URL which will be appended to the email link sent to the user's email address. Once clicked the user will end up on this URL. */\n      redirectTo?: string\n    } = {}\n  ): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/invite`, {\n        body: { email, data: options.data },\n        headers: this.headers,\n        redirectTo: options.redirectTo,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Generates email links and OTPs to be sent via a custom email provider.\n   * @param email The user's email.\n   * @param options.password User password. For signup only.\n   * @param options.data Optional user metadata. For signup only.\n   * @param options.redirectTo The redirect url which should be appended to the generated link\n   */\n  async generateLink(params: GenerateLinkParams): Promise<GenerateLinkResponse> {\n    try {\n      const { options, ...rest } = params\n      const body: any = { ...rest, ...options }\n      if ('newEmail' in rest) {\n        // replace newEmail with new_email in request body\n        body.new_email = rest?.newEmail\n        delete body['newEmail']\n      }\n      return await _request(this.fetch, 'POST', `${this.url}/admin/generate_link`, {\n        body: body,\n        headers: this.headers,\n        xform: _generateLinkResponse,\n        redirectTo: options?.redirectTo,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: {\n            properties: null,\n            user: null,\n          },\n          error,\n        }\n      }\n      throw error\n    }\n  }\n\n  // User Admin API\n  /**\n   * Creates a new user.\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async createUser(attributes: AdminUserAttributes): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/admin/users`, {\n        body: attributes,\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Get a list of users.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   * @param params An object which supports `page` and `perPage` as numbers, to alter the paginated results.\n   */\n  async listUsers(\n    params?: PageParams\n  ): Promise<\n    | { data: { users: User[]; aud: string } & Pagination; error: null }\n    | { data: { users: [] }; error: AuthError }\n  > {\n    try {\n      const pagination: Pagination = { nextPage: null, lastPage: 0, total: 0 }\n      const response = await _request(this.fetch, 'GET', `${this.url}/admin/users`, {\n        headers: this.headers,\n        noResolveJson: true,\n        query: {\n          page: params?.page?.toString() ?? '',\n          per_page: params?.perPage?.toString() ?? '',\n        },\n        xform: _noResolveJsonResponse,\n      })\n      if (response.error) throw response.error\n\n      const users = await response.json()\n      const total = response.headers.get('x-total-count') ?? 0\n      const links = response.headers.get('link')?.split(',') ?? []\n      if (links.length > 0) {\n        links.forEach((link: string) => {\n          const page = parseInt(link.split(';')[0].split('=')[1].substring(0, 1))\n          const rel = JSON.parse(link.split(';')[1].split('=')[1])\n          pagination[`${rel}Page`] = page\n        })\n\n        pagination.total = parseInt(total)\n      }\n      return { data: { ...users, ...pagination }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { users: [] }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Get user by id.\n   *\n   * @param uid The user's unique identifier\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async getUserById(uid: string): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'GET', `${this.url}/admin/users/${uid}`, {\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Updates the user data.\n   *\n   * @param attributes The data you want to update.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async updateUserById(uid: string, attributes: AdminUserAttributes): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'PUT', `${this.url}/admin/users/${uid}`, {\n        body: attributes,\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Delete a user. Requires a `service_role` key.\n   *\n   * @param id The user id you want to remove.\n   * @param shouldSoftDelete If true, then the user will be soft-deleted from the auth schema.\n   * Defaults to false for backward compatibility.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async deleteUser(id: string, shouldSoftDelete = false): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'DELETE', `${this.url}/admin/users/${id}`, {\n        headers: this.headers,\n        body: {\n          should_soft_delete: shouldSoftDelete,\n        },\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  private async _listFactors(\n    params: AuthMFAAdminListFactorsParams\n  ): Promise<AuthMFAAdminListFactorsResponse> {\n    try {\n      const { data, error } = await _request(\n        this.fetch,\n        'GET',\n        `${this.url}/admin/users/${params.userId}/factors`,\n        {\n          headers: this.headers,\n          xform: (factors: any) => {\n            return { data: { factors }, error: null }\n          },\n        }\n      )\n      return { data, error }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  private async _deleteFactor(\n    params: AuthMFAAdminDeleteFactorParams\n  ): Promise<AuthMFAAdminDeleteFactorResponse> {\n    try {\n      const data = await _request(\n        this.fetch,\n        'DELETE',\n        `${this.url}/admin/users/${params.userId}/factors/${params.id}`,\n        {\n          headers: this.headers,\n        }\n      )\n\n      return { data, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n}\n","import { supportsLocalStorage } from './helpers'\nimport { SupportedStorage } from './types'\n\nconst localStorageAdapter: SupportedStorage = {\n  getItem: (key) => {\n    if (!supportsLocalStorage()) {\n      return null\n    }\n\n    return globalThis.localStorage.getItem(key)\n  },\n  setItem: (key, value) => {\n    if (!supportsLocalStorage()) {\n      return\n    }\n\n    globalThis.localStorage.setItem(key, value)\n  },\n  removeItem: (key) => {\n    if (!supportsLocalStorage()) {\n      return\n    }\n\n    globalThis.localStorage.removeItem(key)\n  },\n}\n\nexport default localStorageAdapter\n","/**\n * https://mathiasbynens.be/notes/globalthis\n */\nexport function polyfillGlobalThis() {\n  if (typeof globalThis === 'object') return\n  try {\n    Object.defineProperty(Object.prototype, '__magic__', {\n      get: function () {\n        return this\n      },\n      configurable: true,\n    })\n    // @ts-expect-error 'Allow access to magic'\n    __magic__.globalThis = __magic__\n    // @ts-expect-error 'Allow access to magic'\n    delete Object.prototype.__magic__\n  } catch (e) {\n    if (typeof self !== 'undefined') {\n      // @ts-expect-error 'Allow access to globals'\n      self.globalThis = self\n    }\n  }\n}\n","import GoTrueAdminApi from './GoTrueAdminApi'\nimport { DEFAULT_HEADERS, EXPIRY_MARGIN, GOTRUE_URL, STORAGE_KEY } from './lib/constants'\nimport {\n  AuthError,\n  AuthImplicitGrantRedirectError,\n  AuthPKCEGrantCodeExchangeError,\n  AuthInvalidCredentialsError,\n  AuthRetryableFetchError,\n  AuthSessionMissingError,\n  AuthUnknownError,\n  isAuthApiError,\n  isAuthError,\n} from './lib/errors'\nimport { Fetch, _request, _sessionResponse, _userResponse, _ssoResponse } from './lib/fetch'\nimport {\n  decodeJWTPayload,\n  Deferred,\n  getItemAsync,\n  getParameterByName,\n  isBrowser,\n  removeItemAsync,\n  resolveFetch,\n  setItemAsync,\n  uuid,\n  retryable,\n  sleep,\n  generatePKCEVerifier,\n  generatePKCEChallenge,\n} from './lib/helpers'\nimport localStorageAdapter from './lib/local-storage'\nimport { polyfillGlobalThis } from './lib/polyfills'\n\nimport type {\n  AuthChangeEvent,\n  AuthResponse,\n  CallRefreshTokenResult,\n  GoTrueClientOptions,\n  InitializeResult,\n  OAuthResponse,\n  SSOResponse,\n  Provider,\n  Session,\n  SignInWithIdTokenCredentials,\n  SignInWithOAuthCredentials,\n  SignInWithPasswordCredentials,\n  SignInWithPasswordlessCredentials,\n  SignUpWithPasswordCredentials,\n  SignInWithSSO,\n  Subscription,\n  SupportedStorage,\n  User,\n  UserAttributes,\n  UserResponse,\n  VerifyOtpParams,\n  GoTrueMFAApi,\n  MFAEnrollParams,\n  AuthMFAEnrollResponse,\n  MFAChallengeParams,\n  AuthMFAChallengeResponse,\n  MFAUnenrollParams,\n  AuthMFAUnenrollResponse,\n  MFAVerifyParams,\n  AuthMFAVerifyResponse,\n  AuthMFAListFactorsResponse,\n  AMREntry,\n  AuthMFAGetAuthenticatorAssuranceLevelResponse,\n  AuthenticatorAssuranceLevels,\n  Factor,\n  MFAChallengeAndVerifyParams,\n  ResendParams,\n  AuthFlowType,\n} from './lib/types'\n\npolyfillGlobalThis() // Make \"globalThis\" available\n\nconst DEFAULT_OPTIONS: Omit<Required<GoTrueClientOptions>, 'fetch' | 'storage'> = {\n  url: GOTRUE_URL,\n  storageKey: STORAGE_KEY,\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  headers: DEFAULT_HEADERS,\n  flowType: 'implicit',\n}\n\n/** Current session will be checked for refresh at this interval. */\nconst AUTO_REFRESH_TICK_DURATION = 30 * 1000\n\n/**\n * A token refresh will be attempted this many ticks before the current session expires. */\nconst AUTO_REFRESH_TICK_THRESHOLD = 3\n\nexport default class GoTrueClient {\n  /**\n   * Namespace for the GoTrue admin methods.\n   * These methods should only be used in a trusted server-side environment.\n   */\n  admin: GoTrueAdminApi\n  /**\n   * Namespace for the MFA methods.\n   */\n  mfa: GoTrueMFAApi\n  /**\n   * The storage key used to identify the values saved in localStorage\n   */\n  protected storageKey: string\n\n  /**\n   * The session object for the currently logged in user. If null, it means there isn't a logged-in user.\n   * Only used if persistSession is false.\n   */\n  protected inMemorySession: Session | null\n\n  protected flowType: AuthFlowType\n\n  protected autoRefreshToken: boolean\n  protected persistSession: boolean\n  protected storage: SupportedStorage\n  protected stateChangeEmitters: Map<string, Subscription> = new Map()\n  protected autoRefreshTicker: ReturnType<typeof setInterval> | null = null\n  protected visibilityChangedCallback: (() => Promise<any>) | null = null\n  protected refreshingDeferred: Deferred<CallRefreshTokenResult> | null = null\n  /**\n   * Keeps track of the async client initialization.\n   * When null or not yet resolved the auth state is `unknown`\n   * Once resolved the the auth state is known and it's save to call any further client methods.\n   * Keep extra care to never reject or throw uncaught errors\n   */\n  protected initializePromise: Promise<InitializeResult> | null = null\n  protected detectSessionInUrl = true\n  protected url: string\n  protected headers: {\n    [key: string]: string\n  }\n  protected fetch: Fetch\n\n  /**\n   * Used to broadcast state change events to other tabs listening.\n   */\n  protected broadcastChannel: BroadcastChannel | null = null\n\n  /**\n   * Create a new client for use in the browser.\n   */\n  constructor(options: GoTrueClientOptions) {\n    const settings = { ...DEFAULT_OPTIONS, ...options }\n    this.inMemorySession = null\n    this.storageKey = settings.storageKey\n    this.autoRefreshToken = settings.autoRefreshToken\n    this.persistSession = settings.persistSession\n    this.storage = settings.storage || localStorageAdapter\n    this.admin = new GoTrueAdminApi({\n      url: settings.url,\n      headers: settings.headers,\n      fetch: settings.fetch,\n    })\n\n    this.url = settings.url\n    this.headers = settings.headers\n    this.fetch = resolveFetch(settings.fetch)\n    this.detectSessionInUrl = settings.detectSessionInUrl\n    this.flowType = settings.flowType\n\n    this.mfa = {\n      verify: this._verify.bind(this),\n      enroll: this._enroll.bind(this),\n      unenroll: this._unenroll.bind(this),\n      challenge: this._challenge.bind(this),\n      listFactors: this._listFactors.bind(this),\n      challengeAndVerify: this._challengeAndVerify.bind(this),\n      getAuthenticatorAssuranceLevel: this._getAuthenticatorAssuranceLevel.bind(this),\n    }\n\n    if (isBrowser() && globalThis.BroadcastChannel && this.persistSession && this.storageKey) {\n      try {\n        this.broadcastChannel = new globalThis.BroadcastChannel(this.storageKey)\n      } catch (e: any) {\n        console.error(\n          'Failed to create a new BroadcastChannel, multi-tab state changes will not be available',\n          e\n        )\n      }\n\n      this.broadcastChannel?.addEventListener('message', (event) => {\n        this._notifyAllSubscribers(event.data.event, event.data.session, false) // broadcast = false so we don't get an endless loop of messages\n      })\n    }\n\n    this.initialize()\n  }\n\n  /**\n   * Initializes the client session either from the url or from storage.\n   * This method is automatically called when instantiating the client, but should also be called\n   * manually when checking for an error from an auth redirect (oauth, magiclink, password recovery, etc).\n   */\n  initialize(): Promise<InitializeResult> {\n    if (!this.initializePromise) {\n      this.initializePromise = this._initialize()\n    }\n\n    return this.initializePromise\n  }\n\n  /**\n   * IMPORTANT:\n   * 1. Never throw in this method, as it is called from the constructor\n   * 2. Never return a session from this method as it would be cached over\n   *    the whole lifetime of the client\n   */\n  private async _initialize(): Promise<InitializeResult> {\n    if (this.initializePromise) {\n      return this.initializePromise\n    }\n\n    try {\n      const isPKCEFlow = await this._isPKCEFlow()\n      if ((this.detectSessionInUrl && this._isImplicitGrantFlow()) || isPKCEFlow) {\n        const { data, error } = await this._getSessionFromUrl(isPKCEFlow)\n        if (error) {\n          // failed login attempt via url,\n          // remove old session as in verifyOtp, signUp and signInWith*\n          await this._removeSession()\n\n          return { error }\n        }\n\n        const { session, redirectType } = data\n\n        await this._saveSession(session)\n\n        setTimeout(() => {\n          if (redirectType === 'recovery') {\n            this._notifyAllSubscribers('PASSWORD_RECOVERY', session)\n          } else {\n            this._notifyAllSubscribers('SIGNED_IN', session)\n          }\n        }, 0)\n\n        return { error: null }\n      }\n\n      // no login attempt via callback url try to recover session from storage\n      await this._recoverAndRefresh()\n      return { error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { error }\n      }\n\n      return {\n        error: new AuthUnknownError('Unexpected error during initialization', error),\n      }\n    } finally {\n      await this._handleVisibilityChange()\n    }\n  }\n\n  /**\n   * Creates a new user.\n   *\n   * Be aware that if a user account exists in the system you may get back an\n   * error message that attempts to hide this information from the user.\n   *\n   * @returns A logged-in session if the server has \"autoconfirm\" ON\n   * @returns A user if the server has \"autoconfirm\" OFF\n   */\n  async signUp(credentials: SignUpWithPasswordCredentials): Promise<AuthResponse> {\n    try {\n      await this._removeSession()\n\n      let res: AuthResponse\n      if ('email' in credentials) {\n        const { email, password, options } = credentials\n        let codeChallenge: string | null = null\n        let codeChallengeMethod: string | null = null\n        if (this.flowType === 'pkce') {\n          const codeVerifier = generatePKCEVerifier()\n          await setItemAsync(this.storage, `${this.storageKey}-code-verifier`, codeVerifier)\n          codeChallenge = await generatePKCEChallenge(codeVerifier)\n          codeChallengeMethod = codeVerifier === codeChallenge ? 'plain' : 's256'\n        }\n        res = await _request(this.fetch, 'POST', `${this.url}/signup`, {\n          headers: this.headers,\n          redirectTo: options?.emailRedirectTo,\n          body: {\n            email,\n            password,\n            data: options?.data ?? {},\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n            code_challenge: codeChallenge,\n            code_challenge_method: codeChallengeMethod,\n          },\n          xform: _sessionResponse,\n        })\n      } else if ('phone' in credentials) {\n        const { phone, password, options } = credentials\n        res = await _request(this.fetch, 'POST', `${this.url}/signup`, {\n          headers: this.headers,\n          body: {\n            phone,\n            password,\n            data: options?.data ?? {},\n            channel: options?.channel ?? 'sms',\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          xform: _sessionResponse,\n        })\n      } else {\n        throw new AuthInvalidCredentialsError(\n          'You must provide either an email or phone number and a password'\n        )\n      }\n\n      const { data, error } = res\n\n      if (error || !data) {\n        return { data: { user: null, session: null }, error: error }\n      }\n\n      const session: Session | null = data.session\n      const user: User | null = data.user\n\n      if (data.session) {\n        await this._saveSession(data.session)\n        this._notifyAllSubscribers('SIGNED_IN', session)\n      }\n\n      return { data: { user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Log in an existing user with an email and password or phone and password.\n   *\n   * Be aware that you may get back an error message that will not distinguish\n   * between the cases where the account does not exist or that the\n   * email/phone and password combination is wrong or that the account can only\n   * be accessed via social login.\n   */\n  async signInWithPassword(credentials: SignInWithPasswordCredentials): Promise<AuthResponse> {\n    try {\n      await this._removeSession()\n\n      let res: AuthResponse\n      if ('email' in credentials) {\n        const { email, password, options } = credentials\n        res = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n          headers: this.headers,\n          body: {\n            email,\n            password,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          xform: _sessionResponse,\n        })\n      } else if ('phone' in credentials) {\n        const { phone, password, options } = credentials\n        res = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n          headers: this.headers,\n          body: {\n            phone,\n            password,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          xform: _sessionResponse,\n        })\n      } else {\n        throw new AuthInvalidCredentialsError(\n          'You must provide either an email or phone number and a password'\n        )\n      }\n      const { data, error } = res\n      if (error || !data) return { data: { user: null, session: null }, error }\n      if (data.session) {\n        await this._saveSession(data.session)\n        this._notifyAllSubscribers('SIGNED_IN', data.session)\n      }\n      return { data, error }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Log in an existing user via a third-party provider.\n   */\n  async signInWithOAuth(credentials: SignInWithOAuthCredentials): Promise<OAuthResponse> {\n    await this._removeSession()\n\n    return await this._handleProviderSignIn(credentials.provider, {\n      redirectTo: credentials.options?.redirectTo,\n      scopes: credentials.options?.scopes,\n      queryParams: credentials.options?.queryParams,\n      skipBrowserRedirect: credentials.options?.skipBrowserRedirect,\n    })\n  }\n\n  /**\n   * Log in an existing user by exchanging an Auth Code issued during the PKCE flow.\n   */\n  async exchangeCodeForSession(authCode: string): Promise<AuthResponse> {\n    const codeVerifier = await getItemAsync(this.storage, `${this.storageKey}-code-verifier`)\n    const { data, error } = await _request(\n      this.fetch,\n      'POST',\n      `${this.url}/token?grant_type=pkce`,\n      {\n        headers: this.headers,\n        body: {\n          auth_code: authCode,\n          code_verifier: codeVerifier,\n        },\n        xform: _sessionResponse,\n      }\n    )\n    await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`)\n    if (error || !data) return { data: { user: null, session: null }, error }\n    if (data.session) {\n      await this._saveSession(data.session)\n      this._notifyAllSubscribers('SIGNED_IN', data.session)\n    }\n    return { data, error }\n  }\n\n  /**\n   * Allows signing in with an ID token issued by certain supported providers.\n   * The ID token is verified for validity and a new session is established.\n   *\n   * @experimental\n   */\n  async signInWithIdToken(credentials: SignInWithIdTokenCredentials): Promise<AuthResponse> {\n    await this._removeSession()\n\n    try {\n      const { options, provider, token, nonce } = credentials\n\n      const res = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=id_token`, {\n        headers: this.headers,\n        body: {\n          provider,\n          id_token: token,\n          nonce,\n          gotrue_meta_security: { captcha_token: options?.captchaToken },\n        },\n        xform: _sessionResponse,\n      })\n\n      const { data, error } = res\n      if (error || !data) return { data: { user: null, session: null }, error }\n      if (data.session) {\n        await this._saveSession(data.session)\n        this._notifyAllSubscribers('SIGNED_IN', data.session)\n      }\n      return { data, error }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Log in a user using magiclink or a one-time password (OTP).\n   *\n   * If the `{{ .ConfirmationURL }}` variable is specified in the email template, a magiclink will be sent.\n   * If the `{{ .Token }}` variable is specified in the email template, an OTP will be sent.\n   * If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins.\n   *\n   * Be aware that you may get back an error message that will not distinguish\n   * between the cases where the account does not exist or, that the account\n   * can only be accessed via social login.\n   *\n   * Do note that you will need to configure a Whatsapp sender on Twilio\n   * if you are using phone sign in with the 'whatsapp' channel. The whatsapp\n   * channel is not supported on other providers\n   * at this time.\n   */\n  async signInWithOtp(credentials: SignInWithPasswordlessCredentials): Promise<AuthResponse> {\n    try {\n      await this._removeSession()\n\n      if ('email' in credentials) {\n        const { email, options } = credentials\n        let codeChallenge: string | null = null\n        let codeChallengeMethod: string | null = null\n        if (this.flowType === 'pkce') {\n          const codeVerifier = generatePKCEVerifier()\n          await setItemAsync(this.storage, `${this.storageKey}-code-verifier`, codeVerifier)\n          codeChallenge = await generatePKCEChallenge(codeVerifier)\n          codeChallengeMethod = codeVerifier === codeChallenge ? 'plain' : 's256'\n        }\n        const { error } = await _request(this.fetch, 'POST', `${this.url}/otp`, {\n          headers: this.headers,\n          body: {\n            email,\n            data: options?.data ?? {},\n            create_user: options?.shouldCreateUser ?? true,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n            code_challenge: codeChallenge,\n            code_challenge_method: codeChallengeMethod,\n          },\n          redirectTo: options?.emailRedirectTo,\n        })\n        return { data: { user: null, session: null }, error }\n      }\n      if ('phone' in credentials) {\n        const { phone, options } = credentials\n        const { error } = await _request(this.fetch, 'POST', `${this.url}/otp`, {\n          headers: this.headers,\n          body: {\n            phone,\n            data: options?.data ?? {},\n            create_user: options?.shouldCreateUser ?? true,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n            channel: options?.channel ?? 'sms',\n          },\n        })\n        return { data: { user: null, session: null }, error }\n      }\n      throw new AuthInvalidCredentialsError('You must provide either an email or phone number.')\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Log in a user given a User supplied OTP received via mobile.\n   */\n  async verifyOtp(params: VerifyOtpParams): Promise<AuthResponse> {\n    try {\n      await this._removeSession()\n      const { data, error } = await _request(this.fetch, 'POST', `${this.url}/verify`, {\n        headers: this.headers,\n        body: {\n          ...params,\n          gotrue_meta_security: { captcha_token: params.options?.captchaToken },\n        },\n        redirectTo: params.options?.redirectTo,\n        xform: _sessionResponse,\n      })\n\n      if (error) {\n        throw error\n      }\n\n      if (!data) {\n        throw new Error('An error occurred on token verification.')\n      }\n\n      const session: Session | null = data.session\n      const user: User = data.user\n\n      if (session?.access_token) {\n        await this._saveSession(session as Session)\n        this._notifyAllSubscribers('SIGNED_IN', session)\n      }\n\n      return { data: { user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Attempts a single-sign on using an enterprise Identity Provider. A\n   * successful SSO attempt will redirect the current page to the identity\n   * provider authorization page. The redirect URL is implementation and SSO\n   * protocol specific.\n   *\n   * You can use it by providing a SSO domain. Typically you can extract this\n   * domain by asking users for their email address. If this domain is\n   * registered on the Auth instance the redirect will use that organization's\n   * currently active SSO Identity Provider for the login.\n   *\n   * If you have built an organization-specific login page, you can use the\n   * organization's SSO Identity Provider UUID directly instead.\n   */\n  async signInWithSSO(params: SignInWithSSO): Promise<SSOResponse> {\n    try {\n      await this._removeSession()\n\n      return await _request(this.fetch, 'POST', `${this.url}/sso`, {\n        body: {\n          ...('providerId' in params ? { provider_id: params.providerId } : null),\n          ...('domain' in params ? { domain: params.domain } : null),\n          redirect_to: params.options?.redirectTo ?? undefined,\n          ...(params?.options?.captchaToken\n            ? { gotrue_meta_security: { captcha_token: params.options.captchaToken } }\n            : null),\n          skip_http_redirect: true, // fetch does not handle redirects\n        },\n        headers: this.headers,\n        xform: _ssoResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Sends a reauthentication OTP to the user's email or phone number.\n   * Requires the user to be signed-in.\n   */\n  async reauthenticate(): Promise<AuthResponse> {\n    try {\n      const {\n        data: { session },\n        error: sessionError,\n      } = await this.getSession()\n      if (sessionError) throw sessionError\n      if (!session) throw new AuthSessionMissingError()\n\n      const { error } = await _request(this.fetch, 'GET', `${this.url}/reauthenticate`, {\n        headers: this.headers,\n        jwt: session.access_token,\n      })\n      return { data: { user: null, session: null }, error }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Resends an existing signup confirmation email, email change email, SMS OTP or phone change OTP.\n   */\n  async resend(credentials: ResendParams): Promise<AuthResponse> {\n    try {\n      await this._removeSession()\n      const endpoint = `${this.url}/resend`\n      if ('email' in credentials) {\n        const { email, type, options } = credentials\n        const { error } = await _request(this.fetch, 'POST', endpoint, {\n          headers: this.headers,\n          body: {\n            email,\n            type,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n        })\n        return { data: { user: null, session: null }, error }\n      } else if ('phone' in credentials) {\n        const { phone, type, options } = credentials\n        const { error } = await _request(this.fetch, 'POST', endpoint, {\n          headers: this.headers,\n          body: {\n            phone,\n            type,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n        })\n        return { data: { user: null, session: null }, error }\n      }\n      throw new AuthInvalidCredentialsError(\n        'You must provide either an email or phone number and a type'\n      )\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Returns the session, refreshing it if necessary.\n   * The session returned can be null if the session is not detected which can happen in the event a user is not signed-in or has logged out.\n   */\n  async getSession(): Promise<\n    | {\n        data: {\n          session: Session\n        }\n        error: null\n      }\n    | {\n        data: {\n          session: null\n        }\n        error: AuthError\n      }\n    | {\n        data: {\n          session: null\n        }\n        error: null\n      }\n  > {\n    // make sure we've read the session from the url if there is one\n    // save to just await, as long we make sure _initialize() never throws\n    await this.initializePromise\n\n    let currentSession: Session | null = null\n\n    if (this.persistSession) {\n      const maybeSession = await getItemAsync(this.storage, this.storageKey)\n\n      if (maybeSession !== null) {\n        if (this._isValidSession(maybeSession)) {\n          currentSession = maybeSession\n        } else {\n          await this._removeSession()\n        }\n      }\n    } else {\n      currentSession = this.inMemorySession\n    }\n\n    if (!currentSession) {\n      return { data: { session: null }, error: null }\n    }\n\n    const hasExpired = currentSession.expires_at\n      ? currentSession.expires_at <= Date.now() / 1000\n      : false\n    if (!hasExpired) {\n      return { data: { session: currentSession }, error: null }\n    }\n\n    const { session, error } = await this._callRefreshToken(currentSession.refresh_token)\n    if (error) {\n      return { data: { session: null }, error }\n    }\n\n    return { data: { session }, error: null }\n  }\n\n  /**\n   * Gets the current user details if there is an existing session.\n   * @param jwt Takes in an optional access token jwt. If no jwt is provided, getUser() will attempt to get the jwt from the current session.\n   */\n  async getUser(jwt?: string): Promise<UserResponse> {\n    try {\n      if (!jwt) {\n        const { data, error } = await this.getSession()\n        if (error) {\n          throw error\n        }\n\n        // Default to Authorization header if there is no existing session\n        jwt = data.session?.access_token ?? undefined\n      }\n\n      return await _request(this.fetch, 'GET', `${this.url}/user`, {\n        headers: this.headers,\n        jwt: jwt,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Updates user data for a logged in user.\n   */\n  async updateUser(\n    attributes: UserAttributes,\n    options: {\n      emailRedirectTo?: string | undefined\n    } = {}\n  ): Promise<UserResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        throw sessionError\n      }\n      if (!sessionData.session) {\n        throw new AuthSessionMissingError()\n      }\n      const session: Session = sessionData.session\n      const { data, error: userError } = await _request(this.fetch, 'PUT', `${this.url}/user`, {\n        headers: this.headers,\n        redirectTo: options?.emailRedirectTo,\n        body: attributes,\n        jwt: session.access_token,\n        xform: _userResponse,\n      })\n      if (userError) throw userError\n      session.user = data.user as User\n      await this._saveSession(session)\n      this._notifyAllSubscribers('USER_UPDATED', session)\n\n      return { data: { user: session.user }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Decodes a JWT (without performing any validation).\n   */\n  private _decodeJWT(jwt: string): {\n    exp?: number\n    aal?: AuthenticatorAssuranceLevels | null\n    amr?: AMREntry[] | null\n  } {\n    return decodeJWTPayload(jwt)\n  }\n\n  /**\n   * Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session.\n   * If the refresh token or access token in the current session is invalid, an error will be thrown.\n   * @param currentSession The current session that minimally contains an access token and refresh token.\n   */\n  async setSession(currentSession: {\n    access_token: string\n    refresh_token: string\n  }): Promise<AuthResponse> {\n    try {\n      if (!currentSession.access_token || !currentSession.refresh_token) {\n        throw new AuthSessionMissingError()\n      }\n\n      const timeNow = Date.now() / 1000\n      let expiresAt = timeNow\n      let hasExpired = true\n      let session: Session | null = null\n      const payload = decodeJWTPayload(currentSession.access_token)\n      if (payload.exp) {\n        expiresAt = payload.exp\n        hasExpired = expiresAt <= timeNow\n      }\n\n      if (hasExpired) {\n        const { session: refreshedSession, error } = await this._callRefreshToken(\n          currentSession.refresh_token\n        )\n        if (error) {\n          return { data: { user: null, session: null }, error: error }\n        }\n\n        if (!refreshedSession) {\n          return { data: { user: null, session: null }, error: null }\n        }\n        session = refreshedSession\n      } else {\n        const { data, error } = await this.getUser(currentSession.access_token)\n        if (error) {\n          throw error\n        }\n        session = {\n          access_token: currentSession.access_token,\n          refresh_token: currentSession.refresh_token,\n          user: data.user,\n          token_type: 'bearer',\n          expires_in: expiresAt - timeNow,\n          expires_at: expiresAt,\n        }\n        await this._saveSession(session)\n        this._notifyAllSubscribers('SIGNED_IN', session)\n      }\n\n      return { data: { user: session.user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { session: null, user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Returns a new session, regardless of expiry status.\n   * Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession().\n   * If the current session's refresh token is invalid, an error will be thrown.\n   * @param currentSession The current session. If passed in, it must contain a refresh token.\n   */\n  async refreshSession(currentSession?: { refresh_token: string }): Promise<AuthResponse> {\n    try {\n      if (!currentSession) {\n        const { data, error } = await this.getSession()\n        if (error) {\n          throw error\n        }\n\n        currentSession = data.session ?? undefined\n      }\n\n      if (!currentSession?.refresh_token) {\n        throw new AuthSessionMissingError()\n      }\n\n      const { session, error } = await this._callRefreshToken(currentSession.refresh_token)\n      if (error) {\n        return { data: { user: null, session: null }, error: error }\n      }\n\n      if (!session) {\n        return { data: { user: null, session: null }, error: null }\n      }\n\n      return { data: { user: session.user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Gets the session data from a URL string\n   */\n  private async _getSessionFromUrl(isPKCEFlow: boolean): Promise<\n    | {\n        data: { session: Session; redirectType: string | null }\n        error: null\n      }\n    | { data: { session: null; redirectType: null }; error: AuthError }\n  > {\n    try {\n      if (!isBrowser()) throw new AuthImplicitGrantRedirectError('No browser detected.')\n      if (this.flowType === 'implicit' && !this._isImplicitGrantFlow()) {\n        throw new AuthImplicitGrantRedirectError('Not a valid implicit grant flow url.')\n      } else if (this.flowType == 'pkce' && !isPKCEFlow) {\n        throw new AuthPKCEGrantCodeExchangeError('Not a valid PKCE flow url.')\n      }\n      if (isPKCEFlow) {\n        const authCode = getParameterByName('code')\n        if (!authCode) throw new AuthPKCEGrantCodeExchangeError('No code detected.')\n        const { data, error } = await this.exchangeCodeForSession(authCode)\n        if (error) throw error\n        if (!data.session) throw new AuthPKCEGrantCodeExchangeError('No session detected.')\n        let url = new URL(window.location.href)\n        url.searchParams.delete('code')\n        window.history.replaceState(window.history.state, '', url.toString())\n        return { data: { session: data.session, redirectType: null }, error: null }\n      }\n\n      const error_description = getParameterByName('error_description')\n      if (error_description) {\n        const error_code = getParameterByName('error_code')\n        if (!error_code) throw new AuthImplicitGrantRedirectError('No error_code detected.')\n        const error = getParameterByName('error')\n        if (!error) throw new AuthImplicitGrantRedirectError('No error detected.')\n\n        throw new AuthImplicitGrantRedirectError(error_description, { error, code: error_code })\n      }\n\n      const provider_token = getParameterByName('provider_token')\n      const provider_refresh_token = getParameterByName('provider_refresh_token')\n      const access_token = getParameterByName('access_token')\n      if (!access_token) throw new AuthImplicitGrantRedirectError('No access_token detected.')\n      const expires_in = getParameterByName('expires_in')\n      if (!expires_in) throw new AuthImplicitGrantRedirectError('No expires_in detected.')\n      const refresh_token = getParameterByName('refresh_token')\n      if (!refresh_token) throw new AuthImplicitGrantRedirectError('No refresh_token detected.')\n      const token_type = getParameterByName('token_type')\n      if (!token_type) throw new AuthImplicitGrantRedirectError('No token_type detected.')\n\n      const timeNow = Math.round(Date.now() / 1000)\n      const expires_at = timeNow + parseInt(expires_in)\n\n      const { data, error } = await this.getUser(access_token)\n      if (error) throw error\n      const user: User = data.user\n      const session: Session = {\n        provider_token,\n        provider_refresh_token,\n        access_token,\n        expires_in: parseInt(expires_in),\n        expires_at,\n        refresh_token,\n        token_type,\n        user,\n      }\n      const redirectType = getParameterByName('type')\n\n      // Remove tokens from URL\n      window.location.hash = ''\n\n      return { data: { session, redirectType }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { session: null, redirectType: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Checks if the current URL contains parameters given by an implicit oauth grant flow (https://www.rfc-editor.org/rfc/rfc6749.html#section-4.2)\n   */\n  private _isImplicitGrantFlow(): boolean {\n    return (\n      isBrowser() &&\n      (Boolean(getParameterByName('access_token')) ||\n        Boolean(getParameterByName('error_description')))\n    )\n  }\n  /**\n   * Checks if the current URL and backing storage contain parameters given by a PKCE flow\n   */\n  private async _isPKCEFlow(): Promise<boolean> {\n    const currentStorageContent = await getItemAsync(\n      this.storage,\n      `${this.storageKey}-code-verifier`\n    )\n    return isBrowser() && Boolean(getParameterByName('code')) && Boolean(currentStorageContent)\n  }\n\n  /**\n   * Inside a browser context, `signOut()` will remove the logged in user from the browser session\n   * and log them out - removing all items from localstorage and then trigger a `\"SIGNED_OUT\"` event.\n   *\n   * For server-side management, you can revoke all refresh tokens for a user by passing a user's JWT through to `auth.api.signOut(JWT: string)`.\n   * There is no way to revoke a user's access token jwt until it expires. It is recommended to set a shorter expiry on the jwt for this reason.\n   */\n  async signOut(): Promise<{ error: AuthError | null }> {\n    const { data, error: sessionError } = await this.getSession()\n    if (sessionError) {\n      return { error: sessionError }\n    }\n    const accessToken = data.session?.access_token\n    if (accessToken) {\n      const { error } = await this.admin.signOut(accessToken)\n      if (error) {\n        // ignore 404s since user might not exist anymore\n        // ignore 401s since an invalid or expired JWT should sign out the current session\n        if (!(isAuthApiError(error) && (error.status === 404 || error.status === 401))) {\n          return { error }\n        }\n      }\n    }\n    await this._removeSession()\n    await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`)\n    this._notifyAllSubscribers('SIGNED_OUT', null)\n    return { error: null }\n  }\n\n  /**\n   * Receive a notification every time an auth event happens.\n   * @param callback A callback function to be invoked when an auth event happens.\n   */\n  onAuthStateChange(callback: (event: AuthChangeEvent, session: Session | null) => void): {\n    data: { subscription: Subscription }\n  } {\n    const id: string = uuid()\n    const subscription: Subscription = {\n      id,\n      callback,\n      unsubscribe: () => {\n        this.stateChangeEmitters.delete(id)\n      },\n    }\n\n    this.stateChangeEmitters.set(id, subscription)\n\n    this.emitInitialSession(id)\n\n    return { data: { subscription } }\n  }\n\n  private async emitInitialSession(id: string): Promise<void> {\n    try {\n      const {\n        data: { session },\n        error,\n      } = await this.getSession()\n      if (error) throw error\n\n      this.stateChangeEmitters.get(id)?.callback('INITIAL_SESSION', session)\n    } catch (err) {\n      this.stateChangeEmitters.get(id)?.callback('INITIAL_SESSION', null)\n      console.error(err)\n    }\n  }\n\n  /**\n   * Sends a password reset request to an email address.\n   * @param email The email address of the user.\n   * @param options.redirectTo The URL to send the user to after they click the password reset link.\n   * @param options.captchaToken Verification token received when the user completes the captcha on the site.\n   */\n  async resetPasswordForEmail(\n    email: string,\n    options: {\n      redirectTo?: string\n      captchaToken?: string\n    } = {}\n  ): Promise<\n    | {\n        data: {}\n        error: null\n      }\n    | { data: null; error: AuthError }\n  > {\n    let codeChallenge: string | null = null\n    let codeChallengeMethod: string | null = null\n    if (this.flowType === 'pkce') {\n      const codeVerifier = generatePKCEVerifier()\n      await setItemAsync(this.storage, `${this.storageKey}-code-verifier`, codeVerifier)\n      codeChallenge = await generatePKCEChallenge(codeVerifier)\n      codeChallengeMethod = codeVerifier === codeChallenge ? 'plain' : 's256'\n    }\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/recover`, {\n        body: {\n          email,\n          code_challenge: codeChallenge,\n          code_challenge_method: codeChallengeMethod,\n          gotrue_meta_security: { captcha_token: options.captchaToken },\n        },\n        headers: this.headers,\n        redirectTo: options.redirectTo,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Generates a new JWT.\n   * @param refreshToken A valid refresh token that was returned on login.\n   */\n  private async _refreshAccessToken(refreshToken: string): Promise<AuthResponse> {\n    try {\n      const startedAt = Date.now()\n\n      // will attempt to refresh the token with exponential backoff\n      return await retryable(\n        async (attempt) => {\n          await sleep(attempt * 200) // 0, 200, 400, 800, ...\n\n          return await _request(this.fetch, 'POST', `${this.url}/token?grant_type=refresh_token`, {\n            body: { refresh_token: refreshToken },\n            headers: this.headers,\n            xform: _sessionResponse,\n          })\n        },\n        (attempt, _, result) =>\n          result &&\n          result.error &&\n          result.error instanceof AuthRetryableFetchError &&\n          // retryable only if the request can be sent before the backoff overflows the tick duration\n          Date.now() + (attempt + 1) * 200 - startedAt < AUTO_REFRESH_TICK_DURATION\n      )\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { session: null, user: null }, error }\n      }\n      throw error\n    }\n  }\n\n  private _isValidSession(maybeSession: unknown): maybeSession is Session {\n    const isValidSession =\n      typeof maybeSession === 'object' &&\n      maybeSession !== null &&\n      'access_token' in maybeSession &&\n      'refresh_token' in maybeSession &&\n      'expires_at' in maybeSession\n\n    return isValidSession\n  }\n\n  private async _handleProviderSignIn(\n    provider: Provider,\n    options: {\n      redirectTo?: string\n      scopes?: string\n      queryParams?: { [key: string]: string }\n      skipBrowserRedirect?: boolean\n    }\n  ) {\n    const url: string = await this._getUrlForProvider(provider, {\n      redirectTo: options.redirectTo,\n      scopes: options.scopes,\n      queryParams: options.queryParams,\n    })\n    // try to open on the browser\n    if (isBrowser() && !options.skipBrowserRedirect) {\n      window.location.assign(url)\n    }\n\n    return { data: { provider, url }, error: null }\n  }\n\n  /**\n   * Recovers the session from LocalStorage and refreshes\n   * Note: this method is async to accommodate for AsyncStorage e.g. in React native.\n   */\n  private async _recoverAndRefresh() {\n    try {\n      const currentSession = await getItemAsync(this.storage, this.storageKey)\n      if (!this._isValidSession(currentSession)) {\n        if (currentSession !== null) {\n          await this._removeSession()\n        }\n\n        return\n      }\n\n      const timeNow = Math.round(Date.now() / 1000)\n\n      if ((currentSession.expires_at ?? Infinity) < timeNow + EXPIRY_MARGIN) {\n        if (this.autoRefreshToken && currentSession.refresh_token) {\n          const { error } = await this._callRefreshToken(currentSession.refresh_token)\n\n          if (error) {\n            console.log(error.message)\n            await this._removeSession()\n          }\n        }\n      } else {\n        if (this.persistSession) {\n          await this._saveSession(currentSession)\n        }\n        this._notifyAllSubscribers('SIGNED_IN', currentSession)\n      }\n    } catch (err) {\n      console.error(err)\n      return\n    }\n  }\n\n  private async _callRefreshToken(refreshToken: string): Promise<CallRefreshTokenResult> {\n    // refreshing is already in progress\n    if (this.refreshingDeferred) {\n      return this.refreshingDeferred.promise\n    }\n\n    try {\n      this.refreshingDeferred = new Deferred<CallRefreshTokenResult>()\n\n      if (!refreshToken) {\n        throw new AuthSessionMissingError()\n      }\n      const { data, error } = await this._refreshAccessToken(refreshToken)\n      if (error) throw error\n      if (!data.session) throw new AuthSessionMissingError()\n\n      await this._saveSession(data.session)\n      this._notifyAllSubscribers('TOKEN_REFRESHED', data.session)\n\n      const result = { session: data.session, error: null }\n\n      this.refreshingDeferred.resolve(result)\n\n      return result\n    } catch (error) {\n      if (isAuthError(error)) {\n        const result = { session: null, error }\n\n        this.refreshingDeferred?.resolve(result)\n\n        return result\n      }\n\n      this.refreshingDeferred?.reject(error)\n      throw error\n    } finally {\n      this.refreshingDeferred = null\n    }\n  }\n\n  private _notifyAllSubscribers(event: AuthChangeEvent, session: Session | null, broadcast = true) {\n    if (this.broadcastChannel && broadcast) {\n      this.broadcastChannel.postMessage({ event, session })\n    }\n\n    this.stateChangeEmitters.forEach((x) => x.callback(event, session))\n  }\n\n  /**\n   * set currentSession and currentUser\n   * process to _startAutoRefreshToken if possible\n   */\n  private async _saveSession(session: Session) {\n    if (!this.persistSession) {\n      this.inMemorySession = session\n    }\n\n    if (this.persistSession && session.expires_at) {\n      await this._persistSession(session)\n    }\n  }\n\n  private _persistSession(currentSession: Session) {\n    return setItemAsync(this.storage, this.storageKey, currentSession)\n  }\n\n  private async _removeSession() {\n    if (this.persistSession) {\n      await removeItemAsync(this.storage, this.storageKey)\n    } else {\n      this.inMemorySession = null\n    }\n  }\n\n  /**\n   * Removes any registered visibilitychange callback.\n   *\n   * {@see #startAutoRefresh}\n   * {@see #stopAutoRefresh}\n   */\n  private _removeVisibilityChangedCallback() {\n    const callback = this.visibilityChangedCallback\n    this.visibilityChangedCallback = null\n\n    try {\n      if (callback && isBrowser() && window?.removeEventListener) {\n        window.removeEventListener('visibilitychange', callback)\n      }\n    } catch (e) {\n      console.error('removing visibilitychange callback failed', e)\n    }\n  }\n\n  /**\n   * This is the private implementation of {@link #startAutoRefresh}. Use this\n   * within the library.\n   */\n  private async _startAutoRefresh() {\n    await this._stopAutoRefresh()\n\n    const ticker = setInterval(() => this._autoRefreshTokenTick(), AUTO_REFRESH_TICK_DURATION)\n    this.autoRefreshTicker = ticker\n\n    if (ticker && typeof ticker === 'object' && typeof ticker.unref === 'function') {\n      // ticker is a NodeJS Timeout object that has an `unref` method\n      // https://nodejs.org/api/timers.html#timeoutunref\n      // When auto refresh is used in NodeJS (like for testing) the\n      // `setInterval` is preventing the process from being marked as\n      // finished and tests run endlessly. This can be prevented by calling\n      // `unref()` on the returned object.\n      ticker.unref()\n      // @ts-ignore\n    } else if (typeof Deno !== 'undefined' && typeof Deno.unrefTimer === 'function') {\n      // similar like for NodeJS, but with the Deno API\n      // https://deno.land/api@latest?unstable&s=Deno.unrefTimer\n      // @ts-ignore\n      Deno.unrefTimer(ticker)\n    }\n\n    // run the tick immediately\n    await this._autoRefreshTokenTick()\n  }\n\n  /**\n   * This is the private implementation of {@link #stopAutoRefresh}. Use this\n   * within the library.\n   */\n  private async _stopAutoRefresh() {\n    const ticker = this.autoRefreshTicker\n    this.autoRefreshTicker = null\n\n    if (ticker) {\n      clearInterval(ticker)\n    }\n  }\n\n  /**\n   * Starts an auto-refresh process in the background. The session is checked\n   * every few seconds. Close to the time of expiration a process is started to\n   * refresh the session. If refreshing fails it will be retried for as long as\n   * necessary.\n   *\n   * If you set the {@link GoTrueClientOptions#autoRefreshToken} you don't need\n   * to call this function, it will be called for you.\n   *\n   * On browsers the refresh process works only when the tab/window is in the\n   * foreground to conserve resources as well as prevent race conditions and\n   * flooding auth with requests. If you call this method any managed\n   * visibility change callback will be removed and you must manage visibility\n   * changes on your own.\n   *\n   * On non-browser platforms the refresh process works *continuously* in the\n   * background, which may not be desireable. You should hook into your\n   * platform's foreground indication mechanism and call these methods\n   * appropriately to conserve resources.\n   *\n   * {@see #stopAutoRefresh}\n   */\n  async startAutoRefresh() {\n    this._removeVisibilityChangedCallback()\n    await this._startAutoRefresh()\n  }\n\n  /**\n   * Stops an active auto refresh process running in the background (if any).\n   *\n   * If you call this method any managed visibility change callback will be\n   * removed and you must manage visibility changes on your own.\n   *\n   * See {@link #startAutoRefresh} for more details.\n   */\n  async stopAutoRefresh() {\n    this._removeVisibilityChangedCallback()\n    await this._stopAutoRefresh()\n  }\n\n  /**\n   * Runs the auto refresh token tick.\n   */\n  private async _autoRefreshTokenTick() {\n    const now = Date.now()\n\n    try {\n      const {\n        data: { session },\n      } = await this.getSession()\n\n      if (!session || !session.refresh_token || !session.expires_at) {\n        return\n      }\n\n      // session will expire in this many ticks (or has already expired if <= 0)\n      const expiresInTicks = Math.floor(\n        (session.expires_at * 1000 - now) / AUTO_REFRESH_TICK_DURATION\n      )\n\n      if (expiresInTicks < AUTO_REFRESH_TICK_THRESHOLD) {\n        await this._callRefreshToken(session.refresh_token)\n      }\n    } catch (e: any) {\n      console.error('Auto refresh tick failed with error. This is likely a transient error.', e)\n    }\n  }\n\n  /**\n   * Registers callbacks on the browser / platform, which in-turn run\n   * algorithms when the browser window/tab are in foreground. On non-browser\n   * platforms it assumes always foreground.\n   */\n  private async _handleVisibilityChange() {\n    if (!isBrowser() || !window?.addEventListener) {\n      if (this.autoRefreshToken) {\n        // in non-browser environments the refresh token ticker runs always\n        this.startAutoRefresh()\n      }\n\n      return false\n    }\n\n    try {\n      this.visibilityChangedCallback = async () => await this._onVisibilityChanged(false)\n\n      window?.addEventListener('visibilitychange', this.visibilityChangedCallback)\n\n      // now immediately call the visbility changed callback to setup with the\n      // current visbility state\n      await this._onVisibilityChanged(true) // initial call\n    } catch (error) {\n      console.error('_handleVisibilityChange', error)\n    }\n  }\n\n  /**\n   * Callback registered with `window.addEventListener('visibilitychange')`.\n   */\n  private async _onVisibilityChanged(isInitial: boolean) {\n    if (document.visibilityState === 'visible') {\n      if (!isInitial) {\n        // initial visibility change setup is handled in another flow under #initialize()\n        await this.initializePromise\n        await this._recoverAndRefresh()\n      }\n\n      if (this.autoRefreshToken) {\n        // in browser environments the refresh token ticker runs only on focused tabs\n        // which prevents race conditions\n        this._startAutoRefresh()\n      }\n    } else if (document.visibilityState === 'hidden') {\n      if (this.autoRefreshToken) {\n        this._stopAutoRefresh()\n      }\n    }\n  }\n\n  /**\n   * Generates the relevant login URL for a third-party provider.\n   * @param options.redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param options.scopes A space-separated list of scopes granted to the OAuth application.\n   * @param options.queryParams An object of key-value pairs containing query parameters granted to the OAuth application.\n   */\n  private async _getUrlForProvider(\n    provider: Provider,\n    options: {\n      redirectTo?: string\n      scopes?: string\n      queryParams?: { [key: string]: string }\n    }\n  ) {\n    const urlParams: string[] = [`provider=${encodeURIComponent(provider)}`]\n    if (options?.redirectTo) {\n      urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`)\n    }\n    if (options?.scopes) {\n      urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`)\n    }\n    if (this.flowType === 'pkce') {\n      const codeVerifier = generatePKCEVerifier()\n      await setItemAsync(this.storage, `${this.storageKey}-code-verifier`, codeVerifier)\n      const codeChallenge = await generatePKCEChallenge(codeVerifier)\n      const codeChallengeMethod = codeVerifier === codeChallenge ? 'plain' : 's256'\n      const flowParams = new URLSearchParams({\n        code_challenge: `${encodeURIComponent(codeChallenge)}`,\n        code_challenge_method: `${encodeURIComponent(codeChallengeMethod)}`,\n      })\n      urlParams.push(flowParams.toString())\n    }\n    if (options?.queryParams) {\n      const query = new URLSearchParams(options.queryParams)\n      urlParams.push(query.toString())\n    }\n\n    return `${this.url}/authorize?${urlParams.join('&')}`\n  }\n\n  private async _unenroll(params: MFAUnenrollParams): Promise<AuthMFAUnenrollResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        return { data: null, error: sessionError }\n      }\n\n      return await _request(this.fetch, 'DELETE', `${this.url}/factors/${params.factorId}`, {\n        headers: this.headers,\n        jwt: sessionData?.session?.access_token,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#enroll}\n   */\n  private async _enroll(params: MFAEnrollParams): Promise<AuthMFAEnrollResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        return { data: null, error: sessionError }\n      }\n\n      const { data, error } = await _request(this.fetch, 'POST', `${this.url}/factors`, {\n        body: {\n          friendly_name: params.friendlyName,\n          factor_type: params.factorType,\n          issuer: params.issuer,\n        },\n        headers: this.headers,\n        jwt: sessionData?.session?.access_token,\n      })\n\n      if (error) {\n        return { data: null, error }\n      }\n\n      if (data?.totp?.qr_code) {\n        data.totp.qr_code = `data:image/svg+xml;utf-8,${data.totp.qr_code}`\n      }\n\n      return { data, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#verify}\n   */\n  private async _verify(params: MFAVerifyParams): Promise<AuthMFAVerifyResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        return { data: null, error: sessionError }\n      }\n\n      const { data, error } = await _request(\n        this.fetch,\n        'POST',\n        `${this.url}/factors/${params.factorId}/verify`,\n        {\n          body: { code: params.code, challenge_id: params.challengeId },\n          headers: this.headers,\n          jwt: sessionData?.session?.access_token,\n        }\n      )\n      if (error) {\n        return { data: null, error }\n      }\n\n      await this._saveSession({\n        expires_at: Math.round(Date.now() / 1000) + data.expires_in,\n        ...data,\n      })\n      this._notifyAllSubscribers('MFA_CHALLENGE_VERIFIED', data)\n\n      return { data, error }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#challenge}\n   */\n  private async _challenge(params: MFAChallengeParams): Promise<AuthMFAChallengeResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        return { data: null, error: sessionError }\n      }\n\n      return await _request(\n        this.fetch,\n        'POST',\n        `${this.url}/factors/${params.factorId}/challenge`,\n        {\n          headers: this.headers,\n          jwt: sessionData?.session?.access_token,\n        }\n      )\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#challengeAndVerify}\n   */\n  private async _challengeAndVerify(\n    params: MFAChallengeAndVerifyParams\n  ): Promise<AuthMFAVerifyResponse> {\n    const { data: challengeData, error: challengeError } = await this._challenge({\n      factorId: params.factorId,\n    })\n    if (challengeError) {\n      return { data: null, error: challengeError }\n    }\n    return await this._verify({\n      factorId: params.factorId,\n      challengeId: challengeData.id,\n      code: params.code,\n    })\n  }\n\n  /**\n   * {@see GoTrueMFAApi#listFactors}\n   */\n  private async _listFactors(): Promise<AuthMFAListFactorsResponse> {\n    const {\n      data: { user },\n      error: userError,\n    } = await this.getUser()\n    if (userError) {\n      return { data: null, error: userError }\n    }\n\n    const factors = user?.factors || []\n    const totp = factors.filter(\n      (factor) => factor.factor_type === 'totp' && factor.status === 'verified'\n    )\n\n    return {\n      data: {\n        all: factors,\n        totp,\n      },\n      error: null,\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#getAuthenticatorAssuranceLevel}\n   */\n  private async _getAuthenticatorAssuranceLevel(): Promise<AuthMFAGetAuthenticatorAssuranceLevelResponse> {\n    const {\n      data: { session },\n      error: sessionError,\n    } = await this.getSession()\n    if (sessionError) {\n      return { data: null, error: sessionError }\n    }\n    if (!session) {\n      return {\n        data: { currentLevel: null, nextLevel: null, currentAuthenticationMethods: [] },\n        error: null,\n      }\n    }\n\n    const payload = this._decodeJWT(session.access_token)\n\n    let currentLevel: AuthenticatorAssuranceLevels | null = null\n\n    if (payload.aal) {\n      currentLevel = payload.aal\n    }\n\n    let nextLevel: AuthenticatorAssuranceLevels | null = currentLevel\n\n    const verifiedFactors =\n      session.user.factors?.filter((factor: Factor) => factor.status === 'verified') ?? []\n\n    if (verifiedFactors.length > 0) {\n      nextLevel = 'aal2'\n    }\n\n    const currentAuthenticationMethods = payload.amr || []\n\n    return { data: { currentLevel, nextLevel, currentAuthenticationMethods }, error: null }\n  }\n}\n","import { GoTrueClient } from '@supabase/gotrue-js'\nimport { SupabaseAuthClientOptions } from './types'\n\nexport class SupabaseAuthClient extends GoTrueClient {\n  constructor(options: SupabaseAuthClientOptions) {\n    super(options)\n  }\n}\n","import { FunctionsClient } from '@supabase/functions-js'\nimport { AuthChangeEvent } from '@supabase/gotrue-js'\nimport {\n  PostgrestClient,\n  PostgrestFilterBuilder,\n  PostgrestQueryBuilder,\n} from '@supabase/postgrest-js'\nimport {\n  RealtimeChannel,\n  RealtimeChannelOptions,\n  RealtimeClient,\n  RealtimeClientOptions,\n} from '@supabase/realtime-js'\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js'\nimport { DEFAULT_HEADERS } from './lib/constants'\nimport { fetchWithAuth } from './lib/fetch'\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers'\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient'\nimport { Fetch, GenericSchema, SupabaseClientOptions, SupabaseAuthClientOptions } from './lib/types'\n\nconst DEFAULT_GLOBAL_OPTIONS = {\n  headers: DEFAULT_HEADERS,\n}\n\nconst DEFAULT_DB_OPTIONS = {\n  schema: 'public',\n}\n\nconst DEFAULT_AUTH_OPTIONS: SupabaseAuthClientOptions = {\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  flowType: 'implicit',\n}\n\nconst DEFAULT_REALTIME_OPTIONS: RealtimeClientOptions = {}\n\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database,\n  Schema extends GenericSchema = Database[SchemaName] extends GenericSchema\n    ? Database[SchemaName]\n    : any\n> {\n  /**\n   * Supabase Auth allows you to create and manage user sessions for access to data that is secured by access policies.\n   */\n  auth: SupabaseAuthClient\n  realtime: RealtimeClient\n\n  protected realtimeUrl: string\n  protected authUrl: string\n  protected storageUrl: string\n  protected functionsUrl: string\n  protected rest: PostgrestClient<Database, SchemaName>\n  protected storageKey: string\n  protected fetch?: Fetch\n  protected changedAccessToken: string | undefined\n\n  protected headers: {\n    [key: string]: string\n  }\n\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.global.fetch A custom fetch implementation.\n   * @param options.global.headers Any additional headers to send with each network request.\n   */\n  constructor(\n    protected supabaseUrl: string,\n    protected supabaseKey: string,\n    options?: SupabaseClientOptions<SchemaName>\n  ) {\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.')\n    if (!supabaseKey) throw new Error('supabaseKey is required.')\n\n    const _supabaseUrl = stripTrailingSlash(supabaseUrl)\n\n    this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, 'ws')\n    this.authUrl = `${_supabaseUrl}/auth/v1`\n    this.storageUrl = `${_supabaseUrl}/storage/v1`\n\n    const isPlatform = _supabaseUrl.match(/(supabase\\.co)|(supabase\\.in)/)\n    if (isPlatform) {\n      const urlParts = _supabaseUrl.split('.')\n      this.functionsUrl = `${urlParts[0]}.functions.${urlParts[1]}.${urlParts[2]}`\n    } else {\n      this.functionsUrl = `${_supabaseUrl}/functions/v1`\n    }\n    // default storage key uses the supabase project ref as a namespace\n    const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`\n    const DEFAULTS = {\n      db: DEFAULT_DB_OPTIONS,\n      realtime: DEFAULT_REALTIME_OPTIONS,\n      auth: { ...DEFAULT_AUTH_OPTIONS, storageKey: defaultStorageKey },\n      global: DEFAULT_GLOBAL_OPTIONS,\n    }\n\n    const settings = applySettingDefaults(options ?? {}, DEFAULTS)\n\n    this.storageKey = settings.auth?.storageKey ?? ''\n    this.headers = settings.global?.headers ?? {}\n\n    this.auth = this._initSupabaseAuthClient(\n      settings.auth ?? {},\n      this.headers,\n      settings.global?.fetch\n    )\n    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), settings.global?.fetch)\n\n    this.realtime = this._initRealtimeClient({ headers: this.headers, ...settings.realtime })\n    this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {\n      headers: this.headers,\n      schema: settings.db?.schema,\n      fetch: this.fetch,\n    })\n\n    this._listenForAuthEvents()\n  }\n\n  /**\n   * Supabase Functions allows you to deploy and invoke edge functions.\n   */\n  get functions() {\n    return new FunctionsClient(this.functionsUrl, {\n      headers: this.headers,\n      customFetch: this.fetch,\n    })\n  }\n\n  /**\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n   */\n  get storage() {\n    return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch)\n  }\n\n  from<\n    TableName extends string & keyof Schema['Tables'],\n    Table extends Schema['Tables'][TableName]\n  >(relation: TableName): PostgrestQueryBuilder<Schema, Table>\n  from<ViewName extends string & keyof Schema['Views'], View extends Schema['Views'][ViewName]>(\n    relation: ViewName\n  ): PostgrestQueryBuilder<Schema, View>\n  from(relation: string): PostgrestQueryBuilder<Schema, any>\n  /**\n   * Perform a query on a table or a view.\n   *\n   * @param relation - The table or view name to query\n   */\n  from(relation: string): PostgrestQueryBuilder<Schema, any> {\n    return this.rest.from(relation)\n  }\n\n  /**\n   * Perform a function call.\n   *\n   * @param fn - The function name to call\n   * @param args - The arguments to pass to the function call\n   * @param options - Named parameters\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   * @param options.count - Count algorithm to use to count rows returned by the\n   * function. Only applicable for [set-returning\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  rpc<\n    FunctionName extends string & keyof Schema['Functions'],\n    Function_ extends Schema['Functions'][FunctionName]\n  >(\n    fn: FunctionName,\n    args: Function_['Args'] = {},\n    options?: {\n      head?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n    }\n  ): PostgrestFilterBuilder<\n    Schema,\n    Function_['Returns'] extends any[]\n      ? Function_['Returns'][number] extends Record<string, unknown>\n        ? Function_['Returns'][number]\n        : never\n      : never,\n    Function_['Returns']\n  > {\n    return this.rest.rpc(fn, args, options)\n  }\n\n  /**\n   * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n   *\n   * @param {string} name - The name of the Realtime channel.\n   * @param {Object} opts - The options to pass to the Realtime channel.\n   *\n   */\n  channel(name: string, opts: RealtimeChannelOptions = { config: {} }): RealtimeChannel {\n    return this.realtime.channel(name, opts)\n  }\n\n  /**\n   * Returns all Realtime channels.\n   */\n  getChannels(): RealtimeChannel[] {\n    return this.realtime.getChannels()\n  }\n\n  /**\n   * Unsubscribes and removes Realtime channel from Realtime client.\n   *\n   * @param {RealtimeChannel} channel - The name of the Realtime channel.\n   *\n   */\n  removeChannel(channel: RealtimeChannel): Promise<'ok' | 'timed out' | 'error'> {\n    return this.realtime.removeChannel(channel)\n  }\n\n  /**\n   * Unsubscribes and removes all Realtime channels from Realtime client.\n   */\n  removeAllChannels(): Promise<('ok' | 'timed out' | 'error')[]> {\n    return this.realtime.removeAllChannels()\n  }\n\n  private async _getAccessToken() {\n    const { data } = await this.auth.getSession()\n\n    return data.session?.access_token ?? null\n  }\n\n  private _initSupabaseAuthClient(\n    {\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      storageKey,\n      flowType,\n    }: SupabaseAuthClientOptions,\n    headers?: Record<string, string>,\n    fetch?: Fetch\n  ) {\n    const authHeaders = {\n      Authorization: `Bearer ${this.supabaseKey}`,\n      apikey: `${this.supabaseKey}`,\n    }\n    return new SupabaseAuthClient({\n      url: this.authUrl,\n      headers: { ...authHeaders, ...headers },\n      storageKey: storageKey,\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      flowType,\n      fetch,\n    })\n  }\n\n  private _initRealtimeClient(options: RealtimeClientOptions) {\n    return new RealtimeClient(this.realtimeUrl, {\n      ...options,\n      params: { ...{ apikey: this.supabaseKey }, ...options?.params },\n    })\n  }\n\n  private _listenForAuthEvents() {\n    let data = this.auth.onAuthStateChange((event, session) => {\n      this._handleTokenChanged(event, session?.access_token, 'CLIENT')\n    })\n    return data\n  }\n\n  private _handleTokenChanged(\n    event: AuthChangeEvent,\n    token: string | undefined,\n    source: 'CLIENT' | 'STORAGE'\n  ) {\n    if (\n      (event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\n      this.changedAccessToken !== token\n    ) {\n      // Token has changed\n      this.realtime.setAuth(token ?? null)\n\n      this.changedAccessToken = token\n    } else if (event === 'SIGNED_OUT') {\n      // Token is removed\n      this.realtime.setAuth(this.supabaseKey)\n      if (source == 'STORAGE') this.auth.signOut()\n      this.changedAccessToken = undefined\n    }\n  }\n}\n","import { createClient } from \"@supabase/supabase-js\";\n\n// Create a single supabase client for interacting with your database\nconst supabase = createClient(\n  \"https://bnpndeyqgieoapeqhfll.supabase.co\",\n  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJucG5kZXlxZ2llb2FwZXFoZmxsIiwicm9sZSI6ImFub24iLCJpYXQiOjE2ODUxMDI3NDMsImV4cCI6MjAwMDY3ODc0M30.hwODZJIC_b-mV5gW4QKgiLVkYUa6dR-Epg8XlT4JCzI\"\n);\n\nexport async function newVisitor(name: string) {\n  const { data, error } = await supabase.auth.getSession();\n  if (data.session?.user) {\n    return data.session.user;\n  } else {\n    return supabase.auth.signInWithOAuth({\n      provider: \"google\",\n      options: {\n        redirectTo: \"https://bnpndeyqgieoapeqhfll.supabase.co/auth/v1/callback\"\n      }\n    });\n  }\n\n  // return supabase.from(\"visitors\").insert({ name }).select();\n}\n","import * as telemetry from \"./telemetry\";\nimport \"./style.css\";\n\ntelemetry.newVisitor(\"homam\").then(console.log).catch(console.log);\n\ntype TwoDCoordinate = {\n  x: number;\n  y: number;\n};\ntype LastTwoDCoordinateEvent =\n  | {\n      time: null;\n    }\n  | {\n      time: number;\n      screen: TwoDCoordinate;\n      page: TwoDCoordinate;\n      client: TwoDCoordinate;\n      offset: TwoDCoordinate;\n    };\n\ntype LastTouchEvent =\n  | {\n      time: null;\n    }\n  | {\n      time: number;\n      screen: TwoDCoordinate;\n      page: TwoDCoordinate;\n      client: TwoDCoordinate;\n      radius: TwoDCoordinate;\n      force: number;\n      rotationAngle: number;\n      identifier: number;\n    };\n\nconst NOW = new Date().valueOf();\n\nlet mousedown: LastTwoDCoordinateEvent = {\n  time: null\n};\n\nlet touchStart: LastTouchEvent = {\n  time: null\n};\n\nlet touchMove: LastTouchEvent = {\n  time: null\n};\n\nlet touchEnd: LastTouchEvent = {\n  time: null\n};\n\nlet isTouchStarted = false;\nlet isMouseDown = false;\nlet touchMoveStats: null | {\n  radius: {\n    max: TwoDCoordinate;\n    min: TwoDCoordinate;\n  };\n  force: {\n    max: number;\n    min: number;\n  };\n} = null;\n\nconst logElement = document.getElementById(\"logElement\") as HTMLElement;\nfunction log(msg: string) {\n  logElement.innerHTML = msg;\n}\n\nfunction onTouchCompleted(\n  touchStart: LastTouchEvent,\n  touchMove: LastTouchEvent,\n  touchEnd: LastTouchEvent\n) {\n  log(\n    JSON.stringify(\n      {\n        touchStart,\n        touchMove,\n        touchEnd\n      },\n      null,\n      2\n    )\n  );\n}\n\ndocument.addEventListener(\"mousedown\", (ev) => {\n  isMouseDown = true;\n  mousedown = {\n    time: ev.timeStamp || new Date().valueOf() - NOW,\n    screen: {\n      x: ev.screenX,\n      y: ev.screenY\n    },\n    page: {\n      x: ev.pageX,\n      y: ev.pageY\n    },\n    offset: {\n      x: ev.offsetX,\n      y: ev.offsetY\n    },\n    client: {\n      x: ev.clientX,\n      y: ev.clientY\n    }\n  };\n});\n\ndocument.addEventListener(\"touchstart\", (ev) => {\n  isTouchStarted = true;\n  touchMove = {\n    time: null\n  };\n  touchEnd = {\n    time: null\n  };\n  const touch0 = ev.touches[0];\n  touchStart = {\n    time: ev.timeStamp || new Date().valueOf() - NOW,\n    screen: {\n      x: touch0.screenX,\n      y: touch0.screenY\n    },\n    page: {\n      x: touch0.pageX,\n      y: touch0.pageY\n    },\n    radius: {\n      x: touch0.radiusX,\n      y: touch0.radiusX\n    },\n    force: touch0.force,\n    rotationAngle: touch0.rotationAngle,\n    identifier: touch0.identifier,\n    client: {\n      x: touch0.clientX,\n      y: touch0.clientY\n    }\n  };\n});\n\ndocument.addEventListener(\"touchmove\", (ev) => {\n  const touch0 = ev.touches[0];\n  touchMove = {\n    time: ev.timeStamp || new Date().valueOf() - NOW,\n    screen: {\n      x: touch0.screenX,\n      y: touch0.screenY\n    },\n    page: {\n      x: touch0.pageX,\n      y: touch0.pageY\n    },\n    radius: {\n      x: touch0.radiusX,\n      y: touch0.radiusX\n    },\n    force: touch0.force,\n    rotationAngle: touch0.rotationAngle,\n    identifier: touch0.identifier,\n    client: {\n      x: touch0.clientX,\n      y: touch0.clientY\n    }\n  };\n});\n\ndocument.addEventListener(\"touchend\", (ev) => {\n  const touch0 = ev.changedTouches[0];\n  touchEnd = {\n    time: ev.timeStamp || new Date().valueOf() - NOW,\n    screen: {\n      x: touch0.screenX,\n      y: touch0.screenY\n    },\n    page: {\n      x: touch0.pageX,\n      y: touch0.pageY\n    },\n    radius: {\n      x: touch0.radiusX,\n      y: touch0.radiusX\n    },\n    force: touch0.force,\n    rotationAngle: touch0.rotationAngle,\n    identifier: touch0.identifier,\n    client: {\n      x: touch0.clientX,\n      y: touch0.clientY\n    }\n  };\n  isTouchStarted = false;\n  onTouchCompleted(touchStart, touchMove, touchEnd);\n});\n\n// setInterval(() => {\n//   logElement.innerHTML = JSON.stringify(touchStart, null, 2);\n// }, 200);\n","module.exports = function loadJSBundle(bundle) {\n  return new Promise(function (resolve, reject) {\n    var script = document.createElement('script');\n    script.async = true;\n    script.type = 'text/javascript';\n    script.charset = 'utf-8';\n    script.src = bundle;\n    script.onerror = function (e) {\n      script.onerror = script.onload = null;\n      reject(e);\n    };\n\n    script.onload = function () {\n      script.onerror = script.onload = null;\n      resolve();\n    };\n\n    document.getElementsByTagName('head')[0].appendChild(script);\n  });\n};\n"]}